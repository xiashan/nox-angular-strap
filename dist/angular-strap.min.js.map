{"version":3,"sources":["angular-strap.js","tooltip/tooltip.js","helpers/compiler.js","dropdown/dropdown.js","timepicker/timepicker.js","tab/tab.js","sort/sort.js","select/select.js","rangedatepicker/rangedatepicker.js","popover/popover.js","pagination/pagination.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datetimepicker/datetimepicker.js","datepicker/datepicker.js","alert/alert.js","module.js"],"names":["prefixClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","data","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","target","provider","placement","titleTemplate","trigger","keyboard","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","stopPropagation","directive","$root","$digest","restrict","query","querySelectorAll","isNative","tooltip","transclusion","falseValueRegExp","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","parentScope","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","index","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","$render","keep","Date","setHours","setMinutes","setSeconds","$setViewValue","midIndex","hours","push","disabled","label","selected","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","$onMouseDown","targetEl","triggerHandler","$onKeyDown","keyCode","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","require","$window","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","ngModel","update","timezoneOffsetAdjust","$formatters","modelValue","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","postLink","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","item","list","len","dataName","charAt","toUpperCase","totalItems","currentTarget","$apply","orderBy","sortBy","onSort","clickColumn","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$select","$activeIndex","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","activate","$isVisible","$selectNone","$matches","matches","$updateActiveIndex","a","b","onSelect","isArray","$modelValue","$getIndex","minLength","$viewValue","equals","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","watchedOptions","parsedOptions","valuesFn","values","$match","filter","join","$isEmpty","connector","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","compare","RangeDatepickerFactory","$rangedatepicker","$iconLeft","$compare","$picker","today","$today","view","d","getDay","rangeList","t","getFullYear","getMonth","getDate","rangeType","$toggleCompare","$closePicker","$stopPropagation","sDate","eDate","updateDisabledDates","l","force","$setDisabledEl","$compareDateValue","compareStartDate","compareEndDate","endDate","onlyCompare","$setCompare","pristine","$updateSelected","updateSelected","built","isDisabled","steps","year","getUTCFullYear","getUTCDate","UTC","month","$selectRange","cate","substr","day","pickerViews","validateAgainstMinMaxDate","parsedDate1","rangedatepicker","parsedDate2","$getCompare","getDateFormattedString","strict","getDateForAttribute","getFormattedDate","obj","skey","ekey","date1","date2","toISOString","size","arrays","mod","n","m","arr","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","picker","build","that","firstDate","firstDateOffset","firstDayOfMonthOffset","days","getTimezoneOffset","daylightSavingAdjust","isToday","toDateString","inRange","isInRange","muted","compareSelect","firstDayOfMonth","showLabels","labels","flag","isTodayDisabled","currentDate","isSelected","disabledDateRanges","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","calculateTotalPages","pageClass","totalPages","pagesLength","Math","itemsPerPage","makePage","number","text","isActive","max","getPages","currentPage","pages","half","ceil","$pagination","bsPaginationCtrl","page","selectPage","onChange","noPrevious","noNext","selectPrevious","backdrop","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","setScrollBar","scrollDiv","append","scrollbarWidth","fullWindowWidth","documentElementRect","bodyIsOverflowing","window","innerWidth","resetScrollBar","abs","backdropBaseZindex","$show","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","setTimeout","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$parseOptions","$values","regexp","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","displayValue","factory","offsetParent","docElement","ownerDocument","outer","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","$localeProvider","milliseconds","ParseDate","prototype","noop","array","indexOfCaseInsensitive","str","toString","DateParserFactory","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getTimeForAttribute","undo","getDefaultLocale","getDatetimeFormat","splitTimeFormat","service","bodyEl","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","$iconDown","weekDaysLabels","views","hourFormat","minuteFormat","secondFormat","step","timeTitleFormat","onKeyDown","actualTime","months","lastDate","actualMonth","firstYear","years","actualYear","setYear","startView","hasToday","hasClear","DatetimepickerFactory","$datepicker","$iconRight","$hasToday","$selectPane","$hasClear","$selectTime","$views","selectTime","$toggleMode","$mode","setMode","$setToday","$clear","dateRanges","mode","getUTCMonth","shiftKey","altKey","datetimepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","disabledDates","DatepickerFactory","datepickerViews","concat","Array","duration","dismissible","AlertFactory","$alert","bsAlert","alert"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', [ 'mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip' ]).provider('$timepicker', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    defaultDate: 'auto',\n    prefixClass: 'timepicker',\n    placement: 'bottom-left',\n    templateUrl: 'timepicker/timepicker.tpl.html',\n    trigger: 'focus',\n    container: false,\n    keyboard: true,\n    html: false,\n    delay: 0,\n    useNative: true,\n    timeType: 'date',\n    timeFormat: 'shortTime',\n    timezone: null,\n    modelTimeFormat: null,\n    autoclose: false,\n    minTime: -Infinity,\n    maxTime: +Infinity,\n    length: 5,\n    hourStep: 1,\n    minuteStep: 5,\n    secondStep: 5,\n    roundDisplay: false,\n    iconUp: 'nox-sort-up',\n    iconDown: 'nox-sort-down',\n    arrowBehavior: 'pager'\n  };\n  this.$get = [ '$window', '$document', '$rootScope', '$sce', '$dateFormatter', '$tooltip', '$timeout', function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n    var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n    var isTouch = 'createTouch' in $window.document && isNative;\n    if (!defaults.lang) {\n      defaults.lang = $dateFormatter.getDefaultLocale();\n    }\n    function timepickerFactory(element, controller, config) {\n      var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n      var parentScope = config.scope;\n      var options = $timepicker.$options;\n      var scope = $timepicker.$scope;\n      var lang = options.lang;\n      var formatDate = function(date, format, timezone) {\n        return $dateFormatter.formatDate(date, format, lang, timezone);\n      };\n      function floorMinutes(time) {\n        var coeff = 1e3 * 60 * options.minuteStep;\n        return new Date(Math.floor(time.getTime() / coeff) * coeff);\n      }\n      var selectedIndex = 0;\n      var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n      var startDate = controller.$dateValue || defaultDate;\n      var viewDate = {\n        hour: startDate.getHours(),\n        meridian: startDate.getHours() < 12,\n        minute: startDate.getMinutes(),\n        second: startDate.getSeconds(),\n        millisecond: startDate.getMilliseconds()\n      };\n      var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n      var hoursFormat = $dateFormatter.hoursFormat(format);\n      var timeSeparator = $dateFormatter.timeSeparator(format);\n      var minutesFormat = $dateFormatter.minutesFormat(format);\n      var secondsFormat = $dateFormatter.secondsFormat(format);\n      var showSeconds = $dateFormatter.showSeconds(format);\n      var showAM = $dateFormatter.showAM(format);\n      scope.$iconUp = options.iconUp;\n      scope.$iconDown = options.iconDown;\n      scope.$select = function(date, index) {\n        $timepicker.select(date, index);\n      };\n      scope.$moveIndex = function(value, index) {\n        $timepicker.$moveIndex(value, index);\n      };\n      scope.$switchMeridian = function(date) {\n        $timepicker.switchMeridian(date);\n      };\n      $timepicker.update = function(date) {\n        if (angular.isDate(date) && !isNaN(date.getTime())) {\n          $timepicker.$date = date;\n          angular.extend(viewDate, {\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds(),\n            millisecond: date.getMilliseconds()\n          });\n          $timepicker.$build();\n        } else if (!$timepicker.$isBuilt) {\n          $timepicker.$build();\n        }\n      };\n      $timepicker.select = function(date, index, keep) {\n        if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n          controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n        }\n        if (!angular.isDate(date)) date = new Date(date);\n        if (index === 0) controller.$dateValue.setHours(date.getHours()); else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes()); else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n        controller.$setViewValue(angular.copy(controller.$dateValue));\n        controller.$render();\n        if (options.autoclose && !keep) {\n          $timeout(function() {\n            $timepicker.hide(true);\n          });\n        }\n      };\n      $timepicker.switchMeridian = function(date) {\n        if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n          return;\n        }\n        var hours = (date || controller.$dateValue).getHours();\n        controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n        controller.$setViewValue(angular.copy(controller.$dateValue));\n        controller.$render();\n      };\n      $timepicker.$build = function() {\n        var i;\n        var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n        var hours = [];\n        var hour;\n        for (i = 0; i < options.length; i++) {\n          hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n          hours.push({\n            date: hour,\n            label: formatDate(hour, hoursFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n            disabled: $timepicker.$isDisabled(hour, 0)\n          });\n        }\n        var minutes = [];\n        var minute;\n        for (i = 0; i < options.length; i++) {\n          minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n          minutes.push({\n            date: minute,\n            label: formatDate(minute, minutesFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n            disabled: $timepicker.$isDisabled(minute, 1)\n          });\n        }\n        var seconds = [];\n        var second;\n        for (i = 0; i < options.length; i++) {\n          second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n          seconds.push({\n            date: second,\n            label: formatDate(second, secondsFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n            disabled: $timepicker.$isDisabled(second, 2)\n          });\n        }\n        var rows = [];\n        for (i = 0; i < options.length; i++) {\n          if (showSeconds) {\n            rows.push([ hours[i], minutes[i], seconds[i] ]);\n          } else {\n            rows.push([ hours[i], minutes[i] ]);\n          }\n        }\n        scope.rows = rows;\n        scope.showSeconds = showSeconds;\n        scope.showAM = showAM;\n        scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n        scope.timeSeparator = timeSeparator;\n        $timepicker.$isBuilt = true;\n      };\n      $timepicker.$isSelected = function(date, index) {\n        if (!$timepicker.$date) return false; else if (index === 0) {\n          return date.getHours() === $timepicker.$date.getHours();\n        } else if (index === 1) {\n          return date.getMinutes() === $timepicker.$date.getMinutes();\n        } else if (index === 2) {\n          return date.getSeconds() === $timepicker.$date.getSeconds();\n        }\n      };\n      $timepicker.$isDisabled = function(date, index) {\n        var selectedTime;\n        if (index === 0) {\n          selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n        } else if (index === 1) {\n          selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n        } else if (index === 2) {\n          selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n        }\n        return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n      };\n      scope.$arrowAction = function(value, index) {\n        if (options.arrowBehavior === 'picker') {\n          $timepicker.$setTimeByStep(value, index);\n        } else {\n          $timepicker.$moveIndex(value, index);\n        }\n      };\n      $timepicker.$setTimeByStep = function(value, index) {\n        var newDate = new Date($timepicker.$date || startDate);\n        var hours = newDate.getHours();\n        var minutes = newDate.getMinutes();\n        var seconds = newDate.getSeconds();\n        if (index === 0) {\n          newDate.setHours(hours - parseInt(options.hourStep, 10) * value);\n        } else if (index === 1) {\n          newDate.setMinutes(minutes - parseInt(options.minuteStep, 10) * value);\n        } else if (index === 2) {\n          newDate.setSeconds(seconds - parseInt(options.secondStep, 10) * value);\n        }\n        $timepicker.select(newDate, index, true);\n      };\n      $timepicker.$moveIndex = function(value, index) {\n        var targetDate;\n        if (index === 0) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour + value * options.length, viewDate.minute, viewDate.second);\n          angular.extend(viewDate, {\n            hour: targetDate.getHours()\n          });\n        } else if (index === 1) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + value * options.length * options.minuteStep, viewDate.second);\n          angular.extend(viewDate, {\n            minute: targetDate.getMinutes()\n          });\n        } else if (index === 2) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + value * options.length * options.secondStep);\n          angular.extend(viewDate, {\n            second: targetDate.getSeconds()\n          });\n        }\n        $timepicker.$build();\n      };\n      $timepicker.$onMouseDown = function(evt) {\n        if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n        evt.stopPropagation();\n        if (isTouch) {\n          var targetEl = angular.element(evt.target);\n          if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n            targetEl = targetEl.parent();\n          }\n          targetEl.triggerHandler('click');\n        }\n      };\n      $timepicker.$onKeyDown = function(evt) {\n        if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (evt.keyCode === 13) {\n          $timepicker.hide(true);\n          return;\n        }\n        var newDate = new Date($timepicker.$date);\n        var hours = newDate.getHours();\n        var hoursLength = formatDate(newDate, hoursFormat).length;\n        var minutes = newDate.getMinutes();\n        var minutesLength = formatDate(newDate, minutesFormat).length;\n        var seconds = newDate.getSeconds();\n        var secondsLength = formatDate(newDate, secondsFormat).length;\n        var sepLength = 1;\n        var lateralMove = /(37|39)/.test(evt.keyCode);\n        var count = 2 + showSeconds * 1 + showAM * 1;\n        if (lateralMove) {\n          if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1; else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n        }\n        var selectRange = [ 0, hoursLength ];\n        var incr = 0;\n        if (evt.keyCode === 38) incr = -1;\n        if (evt.keyCode === 40) incr = +1;\n        var isSeconds = selectedIndex === 2 && showSeconds;\n        var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n        if (selectedIndex === 0) {\n          newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n          hoursLength = formatDate(newDate, hoursFormat).length;\n          selectRange = [ 0, hoursLength ];\n        } else if (selectedIndex === 1) {\n          newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n          minutesLength = formatDate(newDate, minutesFormat).length;\n          selectRange = [ hoursLength + sepLength, minutesLength ];\n        } else if (isSeconds) {\n          newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n          secondsLength = formatDate(newDate, secondsFormat).length;\n          selectRange = [ hoursLength + sepLength + minutesLength + sepLength, secondsLength ];\n        } else if (isMeridian) {\n          if (!lateralMove) $timepicker.switchMeridian();\n          selectRange = [ hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2 ];\n        }\n        $timepicker.select(newDate, selectedIndex, true);\n        createSelection(selectRange[0], selectRange[1]);\n        parentScope.$digest();\n      };\n      function createSelection(start, length) {\n        var end = start + length;\n        if (element[0].createTextRange) {\n          var selRange = element[0].createTextRange();\n          selRange.collapse(true);\n          selRange.moveStart('character', start);\n          selRange.moveEnd('character', end);\n          selRange.select();\n        } else if (element[0].setSelectionRange) {\n          element[0].setSelectionRange(start, end);\n        } else if (angular.isUndefined(element[0].selectionStart)) {\n          element[0].selectionStart = start;\n          element[0].selectionEnd = end;\n        }\n      }\n      function focusElement() {\n        element[0].focus();\n      }\n      var _init = $timepicker.init;\n      $timepicker.init = function() {\n        if (isNative && options.useNative) {\n          element.prop('type', 'time');\n          element.css('-webkit-appearance', 'textfield');\n          return;\n        } else if (isTouch) {\n          element.prop('type', 'text');\n          element.attr('readonly', 'true');\n          element.on('click', focusElement);\n        }\n        _init();\n      };\n      var _destroy = $timepicker.destroy;\n      $timepicker.destroy = function() {\n        if (isNative && options.useNative) {\n          element.off('click', focusElement);\n        }\n        _destroy();\n      };\n      var _show = $timepicker.show;\n      $timepicker.show = function() {\n        if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n        _show();\n        $timeout(function() {\n          if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.on('keydown', $timepicker.$onKeyDown);\n          }\n        }, 0, false);\n      };\n      var _hide = $timepicker.hide;\n      $timepicker.hide = function(blur) {\n        if (!$timepicker.$isShown) return;\n        if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n        if (options.keyboard) {\n          if (element) element.off('keydown', $timepicker.$onKeyDown);\n        }\n        _hide(blur);\n      };\n      return $timepicker;\n    }\n    timepickerFactory.defaults = defaults;\n    return timepickerFactory;\n  } ];\n}).directive('bsTimepicker', [ '$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$timepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n  var defaults = $timepicker.defaults;\n  var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n  return {\n    restrict: 'EAC',\n    require: 'ngModel',\n    link: function postLink(scope, element, attr, controller) {\n      var options = {\n        scope: scope\n      };\n      angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate' ], function(key) {\n        if (angular.isDefined(attr[key])) options[key] = attr[key];\n      });\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach([ 'html', 'container', 'autoclose', 'useNative', 'roundDisplay' ], function(key) {\n        if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n          options[key] = false;\n        }\n      });\n      angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n        var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n        if (angular.isDefined(attr[bsKey])) {\n          options[key] = scope.$eval(attr[bsKey]);\n        }\n      });\n      if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n      var timepicker = $timepicker(element, controller, options);\n      options = timepicker.$options;\n      var lang = options.lang;\n      var formatDate = function(date, format, timezone) {\n        return $dateFormatter.formatDate(date, format, lang, timezone);\n      };\n      if (attr.bsShow) {\n        scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          if (newValue === true) {\n            timepicker.show();\n          } else {\n            timepicker.hide();\n          }\n        });\n      }\n      var dateParser = $dateParser({\n        format: options.timeFormat,\n        lang: lang\n      });\n      angular.forEach([ 'minTime', 'maxTime' ], function(key) {\n        if (angular.isDefined(attr[key])) {\n          attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            if (!isNaN(timepicker.$options[key])) timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        }\n      });\n      scope.$watch(attr.ngModel, function(newValue, oldValue) {\n        timepicker.update(controller.$dateValue);\n      }, true);\n      function validateAgainstMinMaxTime(parsedTime) {\n        if (!angular.isDate(parsedTime)) return;\n        var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n        var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n        var isValid = isMinValid && isMaxValid;\n        controller.$setValidity('date', isValid);\n        controller.$setValidity('min', isMinValid);\n        controller.$setValidity('max', isMaxValid);\n        if (!isValid) {\n          return;\n        }\n        controller.$dateValue = parsedTime;\n      }\n      controller.$parsers.unshift(function(viewValue) {\n        var date;\n        if (!viewValue) {\n          controller.$setValidity('date', true);\n          return null;\n        }\n        var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n        if (!parsedTime || isNaN(parsedTime.getTime())) {\n          controller.$setValidity('date', false);\n          return undefined;\n        }\n        validateAgainstMinMaxTime(parsedTime);\n        if (options.timeType === 'string') {\n          date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n          return formatDate(date, options.modelTimeFormat || options.timeFormat);\n        }\n        date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n        if (options.timeType === 'number') {\n          return date.getTime();\n        } else if (options.timeType === 'unix') {\n          return date.getTime() / 1e3;\n        } else if (options.timeType === 'iso') {\n          return date.toISOString();\n        }\n        return new Date(date);\n      });\n      controller.$formatters.push(function(modelValue) {\n        var date;\n        if (angular.isUndefined(modelValue) || modelValue === null) {\n          date = NaN;\n        } else if (angular.isDate(modelValue)) {\n          date = modelValue;\n        } else if (options.timeType === 'string') {\n          date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n        } else if (options.timeType === 'unix') {\n          date = new Date(modelValue * 1e3);\n        } else {\n          date = new Date(modelValue);\n        }\n        controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n        return getTimeFormattedString();\n      });\n      controller.$render = function() {\n        element.val(getTimeFormattedString());\n      };\n      function getTimeFormattedString() {\n        return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n      }\n      scope.$on('$destroy', function() {\n        if (timepicker) timepicker.destroy();\n        options = null;\n        timepicker = null;\n      });\n    }\n  };\n} ]);\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', []).provider('$tab', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    template: 'tab/tab.tpl.html',\n    navClass: 'nav-tabs',\n    activeClass: 'active'\n  };\n  var controller = this.controller = function($scope, $element, $attrs) {\n    var self = this;\n    self.$options = angular.copy(defaults);\n    angular.forEach([ 'animation', 'navClass', 'activeClass' ], function(key) {\n      if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n    });\n    $scope.$navClass = self.$options.navClass;\n    $scope.$activeClass = self.$options.activeClass;\n    self.$panes = $scope.$panes = [];\n    self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n    self.$push = function(pane) {\n      if (angular.isUndefined(self.$panes.$active)) {\n        $scope.$setActive(pane.name || 0);\n      }\n      self.$panes.push(pane);\n    };\n    self.$remove = function(pane) {\n      var index = self.$panes.indexOf(pane);\n      var active = self.$panes.$active;\n      var activeIndex;\n      if (angular.isString(active)) {\n        activeIndex = self.$panes.map(function(pane) {\n          return pane.name;\n        }).indexOf(active);\n      } else {\n        activeIndex = self.$panes.$active;\n      }\n      self.$panes.splice(index, 1);\n      if (index < activeIndex) {\n        activeIndex--;\n      } else if (index === activeIndex && activeIndex === self.$panes.length) {\n        activeIndex--;\n      }\n      if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n        self.$setActive(self.$panes[activeIndex].name || activeIndex);\n      } else {\n        self.$setActive();\n      }\n    };\n    self.$setActive = $scope.$setActive = function(value) {\n      self.$panes.$active = value;\n      self.$activePaneChangeListeners.forEach(function(fn) {\n        fn();\n      });\n    };\n    self.$isActive = $scope.$isActive = function($pane, $index) {\n      return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n    };\n  };\n  this.$get = function() {\n    var $tab = {};\n    $tab.defaults = defaults;\n    $tab.controller = controller;\n    return $tab;\n  };\n}).directive('bsTabs', [ '$window', '$animate', '$tab', '$parse', function($window, $animate, $tab, $parse) {\n  var defaults = $tab.defaults;\n  return {\n    require: [ '?ngModel', 'bsTabs' ],\n    transclude: true,\n    scope: true,\n    controller: [ '$scope', '$element', '$attrs', $tab.controller ],\n    templateUrl: function(element, attr) {\n      return attr.template || defaults.template;\n    },\n    link: function postLink(scope, element, attrs, controllers) {\n      var ngModelCtrl = controllers[0];\n      var bsTabsCtrl = controllers[1];\n      if (ngModelCtrl) {\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n        });\n        ngModelCtrl.$formatters.push(function(modelValue) {\n          bsTabsCtrl.$setActive(modelValue);\n          return modelValue;\n        });\n      }\n      if (attrs.bsActivePane) {\n        var parsedBsActivePane = $parse(attrs.bsActivePane);\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n        });\n        scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n          bsTabsCtrl.$setActive(newValue);\n        }, true);\n      }\n    }\n  };\n} ]).directive('bsPane', [ '$window', '$animate', '$sce', function($window, $animate, $sce) {\n  return {\n    require: [ '^?ngModel', '^bsTabs' ],\n    scope: true,\n    link: function postLink(scope, element, attrs, controllers) {\n      var bsTabsCtrl = controllers[1];\n      element.addClass('tab-pane');\n      attrs.$observe('title', function(newValue, oldValue) {\n        scope.title = $sce.trustAsHtml(newValue);\n      });\n      scope.name = attrs.name;\n      scope.link = attrs.link ? attrs.link : false;\n      if (bsTabsCtrl.$options.animation) {\n        element.addClass(bsTabsCtrl.$options.animation);\n      }\n      attrs.$observe('disabled', function(newValue, oldValue) {\n        scope.disabled = scope.$eval(newValue);\n      });\n      bsTabsCtrl.$push(scope);\n      scope.$on('$destroy', function() {\n        bsTabsCtrl.$remove(scope);\n      });\n      function render() {\n        var index = bsTabsCtrl.$panes.indexOf(scope);\n        $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n      }\n      bsTabsCtrl.$activePaneChangeListeners.push(function() {\n        render();\n      });\n      render();\n    }\n  };\n} ]);\n\n// Source: sort/sort.js\nangular.module('mgcrea.ngStrap.sort', []).directive('bsSort', [function() {\n  return {\n    scope: true,\n    compile: function (element, attrs) {\n      var list = element[0].querySelectorAll('th');\n      for (var i = 0, len = list.length; i < len; i++) {\n        var item = list[i];\n        item = angular.element(item);\n        if (item.attr('data-sortable')) {\n          var dataName = item.attr('data-name');\n          item.append('<div class=\"sorter\"><i class=\"nox-sort-up sort-asc\" ng-class=\"{active: orderBy == \\'' + dataName + '\\' && sortBy == \\'asc\\'}\"></i><i class=\"nox-sort-down sort-desc\" ng-class=\"{active: orderBy == \\'' + dataName + '\\' && sortBy == \\'desc\\'}\"></i></div>');\n        }\n      }\n\n      return function postLink (scope, element, attrs) {\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach(['onSort'], function(key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attrs[bsKey])) {\n            options[key] = scope.$eval(attrs[bsKey]);\n          }\n        });\n        if (angular.isDefined(attrs.totalItems)) {\n          attrs.$observe('totalItems', function (newValue) {\n            options.totalItems = newValue;\n          });\n        }\n        // 初始化排序\n        angular.forEach([ 'orderBy', 'sortBy' ], function(key) {\n          if (angular.isDefined(attrs[key])) {\n            scope[key] = scope.$eval(attrs[key]);\n          }\n        });\n        var list = element[0].querySelectorAll('th');\n        for (var i = 0, len = list.length; i < len; i++) {\n          var item = list[i];\n          item = angular.element(item);\n          if (item.attr('data-sortable')) {\n            item.on('click', clickColumn);\n          }\n        }\n\n        function clickColumn (event) {\n          if (options.totalItems === -1) {\n            return;\n          }\n          var target = angular.element(event.currentTarget);\n          var dataName = target.attr('data-name');\n          if (dataName === scope.orderBy) {\n            scope.sortBy = scope.sortBy === 'asc' ? 'desc' : 'asc';\n          } else {\n            scope.orderBy = dataName;\n            scope.sortBy = 'desc';\n          }\n          scope.$apply();\n\n          if (angular.isDefined(options.onSort) && angular.isFunction(options.onSort)) {\n            options.onSort(scope.orderBy, scope.sortBy);\n          }\n        }\n      };\n    }\n  };\n}]);\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"select-arrow\"><i class=\"nox-sort-down\"></i></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: rangedatepicker/rangedatepicker.js\n/**\n * Created by xiashan on 17/5/12.\n */\n\nangular.module('mgcrea.ngStrap.rangedatepicker', [ 'mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip' ])\n  .provider('$rangedatepicker', function () {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'rangedatepicker',\n      placement: 'bottom-left',\n      templateUrl: 'rangedatepicker/rangedatepicker.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      connector: ' / ',\n      dateType: 'date',\n      dateFormat: 'yyyy-MM-dd',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'nox-sort-left',\n      iconRight: 'nox-sort-right',\n      compare: true\n    };\n    this.$get = ['$window', '$document', '$rootScope', '$sce', '$dateFormatter', 'rangedatepickerViews', '$tooltip', '$timeout',\n      function ($window, $document, $rootScope, $sce, $dateFormatter, rangedatepickerViews, $tooltip, $timeout) {\n        var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n        var isTouch = 'createTouch' in $window.document && isNative;\n        if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n        function RangeDatepickerFactory (element, controller, config) {\n          var $rangedatepicker = $tooltip(element, angular.extend({}, defaults, config));\n          var options = $rangedatepicker.$options;\n          var scope = $rangedatepicker.$scope;\n          var pickerViews = rangedatepickerViews($rangedatepicker);\n          $rangedatepicker.$view = pickerViews.view;\n          var viewDate = pickerViews.viewDate;\n          scope.$iconLeft = options.iconLeft;\n          scope.$iconRight = options.iconRight;\n          scope.$compare = options.compare;\n          var $picker = $rangedatepicker.$view;\n\n          var today = new Date();\n          var t = $rangedatepicker.$today = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n          var d = today.getDay();\n\n          scope.rangeList = [\n            {name: 'Today', value: '0d', date: {start: t, end: t}},\n            {name: 'Yesterday', value: '-2d', date: {start: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 1), end: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 1)}},\n            {name: 'Last 7 Days', value: '-7d', date: {start: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 6), end: t}},\n            {name: 'Last Week', value: '-1w', date: {start: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 6 - d), end: new Date(t.getFullYear(), t.getMonth(), t.getDate() - d)}},\n            {name: 'This Month', value: '0m', date: {start: new Date(t.getFullYear(), t.getMonth(), 1), end: t}},\n            {name: 'Last Month', value: '-1m', date: {start: new Date(t.getFullYear(), t.getMonth() - 1, 1), end: new Date(t.getFullYear(), t.getMonth(), 0)}}\n          ];\n\n          // 区间\n          scope.ctrl = {\n            rangeType: '',\n            compare: ''\n          };\n\n          scope.$select = function (date, index) {\n            // compare只支持选择开始时间\n            if (scope.ctrl.compare && index) {\n              return;\n            }\n            $rangedatepicker.select(date, index);\n          };\n          scope.$selectPane = function (value, index) {\n            // compare只支持选择开始时间\n            if (scope.ctrl.compare && index) {\n              return;\n            }\n            $rangedatepicker.$selectPane(value, index);\n          };\n          scope.$selectRange = function (type) {\n            if (type === scope.ctrl.rangeType || scope.ctrl.compare) {\n              return;\n            }\n            $rangedatepicker.$selectRange(type);\n            $rangedatepicker.hide(true);\n          };\n          scope.$toggleCompare = function () {\n            var modelValue = controller.$modelValue ? angular.copy(controller.$modelValue) : {};\n            modelValue.compare = scope.ctrl.compare;\n            // 只变更了勾选compare\n            modelValue.onlyCompare = true;\n            controller.$setViewValue(modelValue);\n            controller.$render();\n          };\n          scope.$closePicker = function () {\n            $rangedatepicker.hide();\n          };\n          scope.$stopPropagation = function (evt) {\n            evt.stopPropagation();\n          };\n\n          $rangedatepicker.update = function (sDate, eDate, force) {\n            if (angular.isDate(sDate) && !isNaN(sDate.getTime()) && angular.isDate(eDate) && !isNaN(eDate.getTime())) {\n              if (!scope.ctrl.compare) {\n                $rangedatepicker.$date = [sDate, eDate];\n              } else {\n                $rangedatepicker.$compareDate = [sDate, eDate];\n              }\n              $picker.update.call($picker, sDate, eDate);\n            } else {\n              $rangedatepicker.$build(!force);\n            }\n          };\n          $rangedatepicker.updateDisabledDates = function (dateRanges) {\n            options.disabledDateRanges = dateRanges;\n            for (var i = 0, l = scope.rows.length; i < l; i++) {\n              angular.forEach(scope.rows[i], $rangedatepicker.$setDisabledEl);\n            }\n          };\n          $rangedatepicker.select = function (date, index, keep) {\n            var modelValue = controller.$modelValue ? angular.copy(controller.$modelValue) : {};\n            modelValue.compare = scope.ctrl.compare;\n            if (!scope.ctrl.compare) {\n              if (angular.isDate(date)) {\n                if (!angular.isDate(controller.$dateValue[index]) || isNaN(controller.$dateValue[index].getTime())) {\n                  controller.$dateValue[index] = new Date(date);\n                }\n              } else {\n                controller.$dateValue[index] = null;\n              }\n              if (index === 0) {\n                modelValue.startDate = angular.copy(date);\n              } else {\n                modelValue.endDate = angular.copy(date);\n              }\n            } else {\n              controller.$compareDateValue = !controller.$compareDateValue ? [] : controller.$compareDateValue;\n              if (angular.isDate(date)) {\n                if (!angular.isDate(controller.$compareDateValue[index]) || isNaN(controller.$compareDateValue[index].getTime())) {\n                  controller.$compareDateValue[index] = new Date(date);\n                }\n              } else {\n                controller.$compareDateValue[index] = null;\n              }\n              if (index === 0) {\n                modelValue.compareStartDate = angular.copy(date);\n              } else {\n                modelValue.compareEndDate = angular.copy(date);\n              }\n            }\n            modelValue.onlyCompare = false;\n            controller.$setViewValue(modelValue);\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $rangedatepicker.hide(true);\n              });\n            }\n          };\n          $rangedatepicker.$getCompare = function () {\n            return scope.ctrl && scope.ctrl.compare;\n          };\n          $rangedatepicker.$setCompare = function () {\n            scope.ctrl && (scope.ctrl.compare = 'compare');\n          };\n          $rangedatepicker.$build = function (pristine) {\n            if (pristine === true && $picker.built) return;\n            if (pristine === false && !$picker.built) return;\n            $picker.build.call($picker, $rangedatepicker.$date);\n          };\n          $rangedatepicker.$updateSelected = function () {\n            for (var i = 0, l = scope.rows.length; i < l; i++) {\n              angular.forEach(scope.rows[i], updateSelected);\n            }\n          };\n          $rangedatepicker.$isSelected = function (date) {\n            return $picker.isSelected(date);\n          };\n          $rangedatepicker.$setDisabledEl = function (el) {\n            el.disabled = $picker.isDisabled(el.date);\n          };\n          $rangedatepicker.$selectPane = function (value, index) {\n            var steps = $picker.steps;\n            var key = (index === 0) ? 'startDate' : 'endDate';\n            var targetDate = new Date(Date.UTC(viewDate[key].year + (steps.year || 0) * value, viewDate[key].month + (steps.month || 0) * value, 1));\n            angular.extend(viewDate[key], {\n              year: targetDate.getUTCFullYear(),\n              month: targetDate.getUTCMonth(),\n              date: targetDate.getUTCDate()\n            });\n            $rangedatepicker.$build();\n          };\n          $rangedatepicker.$selectRange = function (type) {\n            var cate = type.substr(-1);\n            var value = parseInt(type.substr(0, type.length - 1), 10);\n            var endDate = $rangedatepicker.$today;\n            var startDate;\n            switch (cate) {\n              case 'd':\n                if (value < 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value + 1);\n                  if (value === -2) {\n                    endDate = startDate;\n                  }\n                } else {\n                  startDate = endDate;\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value);\n                }\n                break;\n              case 'w':\n                var day = endDate.getDay();\n                if (value <= 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value * 7 + (day * -1 + 1));\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + (day * -1));\n                } else {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + 7 - day + 1);\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value * 7 + (7 - day));\n                }\n                break;\n              case 'm':\n                if (value === 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), 1);\n                } else if (value < 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth() + value, 1);\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), 0);\n                } else {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 1);\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth() + value + 1, 0);\n                }\n                break;\n              default:\n                break;\n            }\n            if (angular.isDate(startDate) && angular.isDate(endDate)) {\n              controller.$dateValue[0] = angular.copy(startDate);\n              controller.$dateValue[1] = angular.copy(endDate);\n              var modelValue = controller.$modelValue ? angular.copy(controller.$modelValue) : {};\n              modelValue.startDate = angular.copy(startDate);\n              modelValue.endDate = angular.copy(endDate);\n              modelValue.onlyCompare = false;\n              controller.$setViewValue(modelValue);\n              controller.$render();\n              scope.ctrl.rangeType = type;\n            }\n          };\n          $rangedatepicker.$onMouseDown = function (evt) {\n            evt.preventDefault(true);\n            evt.stopPropagation(true);\n            var targetEl = angular.element(evt.target);\n            if (isTouch) {\n              if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n                targetEl = targetEl.parent();\n              }\n              targetEl.triggerHandler('click');\n            }\n          };\n          function updateSelected (el) {\n            el.selected = $rangedatepicker.$isSelected(el.date);\n          }\n          function focusElement () {\n            element[0].focus();\n          }\n          var _init = $rangedatepicker.init;\n          $rangedatepicker.init = function () {\n            if (isNative && options.useNative) {\n              element.prop('type', 'date');\n              element.css('-webkit-appearance', 'textfield');\n              return;\n            } else if (isTouch) {\n              element.prop('type', 'text');\n              element.attr('readonly', 'true');\n              element.on('click', focusElement);\n            }\n            _init();\n          };\n          var _destroy = $rangedatepicker.destroy;\n          $rangedatepicker.destroy = function () {\n            if (isNative && options.useNative) {\n              element.off('click', focusElement);\n            }\n            _destroy();\n          };\n          var _show = $rangedatepicker.show;\n          $rangedatepicker.show = function () {\n            // if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n            if (element.attr('disabled')) return;\n            _show();\n            $timeout(function () {\n              if (!$rangedatepicker.$isShown) return;\n              $rangedatepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $rangedatepicker.$onMouseDown);\n            }, 0, false);\n          };\n          var _hide = $rangedatepicker.hide;\n          $rangedatepicker.hide = function (blur) {\n            if (!$rangedatepicker.$isShown) return;\n            $rangedatepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $rangedatepicker.$onMouseDown);\n            _hide(blur);\n          };\n          return $rangedatepicker;\n        }\n        RangeDatepickerFactory.defaults = defaults;\n        return RangeDatepickerFactory;\n      }];\n  })\n  .directive('bsRangedatepicker', ['$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$rangedatepicker',\n    function ($window, $parse, $q, $dateFormatter, $dateParser, $rangedatepicker) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n      return {\n        restrict: 'EAC',\n        require: 'ngModel',\n        link: function postLink (scope, element, attr, controller) {\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'connector', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'compare'], function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          });\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container', 'autoclose', 'useNative', 'compare'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n              options[key] = false;\n            }\n          });\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n          var rangedatepicker = $rangedatepicker(element, controller, options);\n          options = rangedatepicker.$options;\n          if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n          var lang = options.lang;\n          var formatDate = function (date, format) {\n            return $dateFormatter.formatDate(date, format, lang);\n          };\n          var dateParser = $dateParser({\n            format: options.dateFormat,\n            lang: lang,\n            strict: options.strictFormat\n          });\n          angular.forEach(['minDate', 'maxDate'], function (key) {\n            if (angular.isDefined(attr[key])) {\n              attr.$observe(key, function (newValue) {\n                rangedatepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n                if (!isNaN(rangedatepicker.$options[key])) {\n                  rangedatepicker.$build(false);\n                }\n                // if (controller.$dateValue) {\n                //   validateAgainstMinMaxDate(controller.$dateValue[0], controller.$dateValue[1]);\n                // }\n              });\n            }\n          });\n          if (angular.isDefined(attr.dateFormat)) {\n            attr.$observe('dateFormat', function (newValue) {\n              rangedatepicker.$options.dateFormat = newValue;\n            });\n          }\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            if (newValue && newValue.onlyCompare) {\n              rangedatepicker.update(null, null, true);\n            } else if (rangedatepicker.$getCompare()) {\n              rangedatepicker.$date = [controller.$dateValue[0], controller.$dateValue[1]];\n              rangedatepicker.update(controller.$compareDateValue[0], controller.$compareDateValue[1]);\n            } else {\n              rangedatepicker.update(controller.$dateValue[0], controller.$dateValue[1]);\n            }\n          }, true);\n\n          function getFormattedDate (modelValue) {\n            var date;\n            if (angular.isDate(modelValue)) {\n              date = modelValue;\n            } else if (options.dateType === 'string') {\n              date = dateParser.parse(modelValue, null, options.modelDateFormat);\n            } else if (options.dateType === 'unix') {\n              date = new Date(modelValue * 1e3);\n            } else {\n              date = new Date(modelValue);\n            }\n            return date;\n          }\n          function validateAgainstMinMaxDate (parsedDate1, parsedDate2) {\n            if (!angular.isDate(parsedDate1) || !angular.isDate(parsedDate2)) {\n              return false;\n            }\n            var isMinValid = isNaN(rangedatepicker.$options.minDate) || parsedDate1.getTime() >= rangedatepicker.$options.minDate;\n            var isMaxValid = isNaN(rangedatepicker.$options.maxDate) || parsedDate2.getTime() <= rangedatepicker.$options.maxDate;\n            var isValid = isMinValid && isMaxValid;\n            controller.$setValidity('date', isValid);\n            controller.$setValidity('min', isMinValid);\n            controller.$setValidity('max', isMaxValid);\n            var compare = rangedatepicker.$getCompare();\n            if (isValid) {\n              if (compare) {\n                controller.$compareDateValue[0] = parsedDate1;\n                controller.$compareDateValue[1] = parsedDate2;\n              } else {\n                controller.$dateValue[0] = parsedDate1;\n                controller.$dateValue[1] = parsedDate2;\n              }\n            }\n            return true;\n          }\n          controller.$parsers.unshift(function (viewValue) {\n            var compare = rangedatepicker.$getCompare();\n            if (!viewValue) {\n              controller.$setValidity('date', true);\n              return null;\n            }\n            if (viewValue.onlyCompare) {\n              viewValue.compare = compare;\n              return viewValue;\n            }\n            var parsedDate1;\n            var parsedDate2;\n            if (compare) {\n              parsedDate1 = dateParser.parse(viewValue.compareStartDate, controller.$compareDateValue[0]);\n              parsedDate2 = dateParser.parse(viewValue.compareEndDate, controller.$compareDateValue[1]);\n            } else {\n              parsedDate1 = dateParser.parse(viewValue.startDate, controller.$dateValue[0]);\n              parsedDate2 = dateParser.parse(viewValue.endDate, controller.$dateValue[1]);\n            }\n            if (parsedDate1 && !parsedDate2) {\n              parsedDate2 = angular.copy(parsedDate1);\n            }\n            if (!parsedDate1 && parsedDate2) {\n              parsedDate1 = angular.copy(parsedDate2);\n            }\n            if (!parsedDate1 || isNaN(parsedDate1.getTime()) || !parsedDate2 || isNaN(parsedDate2.getTime())) {\n              controller.$setValidity('date', false);\n              return false;\n            }\n            validateAgainstMinMaxDate(parsedDate1, parsedDate2);\n            var obj = {\n              dateRange: viewValue.dateRange,\n              compare: compare\n            };\n            var skey = '';\n            var ekey = '';\n            if (compare) {\n              // 原对比日期需要显示，因此这里还是要赋值\n              obj.startDate = viewValue.startDate;\n              obj.endDate = viewValue.endDate;\n              skey = 'compareStartDate';\n              ekey = 'compareEndDate';\n            } else {\n              obj.compareStartDate = viewValue.compareStartDate;\n              obj.compareEndDate = viewValue.compareEndDate;\n              skey = 'startDate';\n              ekey = 'endDate';\n            }\n            if (options.dateType === 'string') {\n              obj[skey] = formatDate(dateParser.timezoneOffsetAdjust(parsedDate1, options.timezone, true), options.modelDateFormat || options.dateFormat);\n              obj[ekey] = formatDate(dateParser.timezoneOffsetAdjust(parsedDate2, options.timezone, true), options.modelDateFormat || options.dateFormat);\n              return obj;\n            }\n            var date1;\n            var date2;\n            if (compare) {\n              date1 = dateParser.timezoneOffsetAdjust(controller.$compareDateValue[0], options.timezone, true);\n              date2 = dateParser.timezoneOffsetAdjust(controller.$compareDateValue[1], options.timezone, true);\n            } else {\n              date1 = dateParser.timezoneOffsetAdjust(controller.$dateValue[0], options.timezone, true);\n              date2 = dateParser.timezoneOffsetAdjust(controller.$dateValue[1], options.timezone, true);\n            }\n            if (options.dateType === 'number') {\n              obj[skey] = date1.getTime();\n              obj[ekey] = date2.getTime();\n            } else if (options.dateType === 'unix') {\n              obj[skey] = date1.getTime() / 1e3;\n              obj[ekey] = date2.getTime() / 1e3;\n            } else if (options.dateType === 'iso') {\n              obj[skey] = date1.toISOString();\n              obj[ekey] = date2.toISOString();\n            } else {\n              obj[skey] = new Date(date1);\n              obj[ekey] = new Date(date2);\n            }\n            return obj;\n          });\n          controller.$formatters.push(function (modelValue) {\n            if (angular.isUndefined(modelValue) || modelValue === null) {\n              return '';\n            }\n            if (modelValue.dateRange) {\n              controller.$dateRange = modelValue.dateRange;\n              controller.$dateValue = !controller.$dateValue ? [] : controller.$dateValue;\n              rangedatepicker.$selectRange(controller.$dateRange);\n            } else {\n              controller.$dateValue = [];\n              controller.$compareDateValue = [];\n              if (modelValue.startDate && modelValue.endDate) {\n                var startDate = getFormattedDate(modelValue.startDate);\n                var endDate = getFormattedDate(modelValue.endDate);\n                controller.$dateValue = [dateParser.timezoneOffsetAdjust(startDate, options.timezone), dateParser.timezoneOffsetAdjust(endDate, options.timezone)];\n              }\n              if (modelValue.compareStartDate && modelValue.compareEndDate) {\n                var compareStartDate = getFormattedDate(modelValue.compareStartDate);\n                var compareEndDate = getFormattedDate(modelValue.compareEndDate);\n                controller.$compareDateValue = [dateParser.timezoneOffsetAdjust(compareStartDate, options.timezone), dateParser.timezoneOffsetAdjust(compareEndDate, options.timezone)];\n                if (modelValue.compare) {\n                  rangedatepicker.$setCompare();\n                }\n              }\n            }\n            return getDateFormattedString();\n          });\n          controller.$render = function () {\n            element.val(getDateFormattedString());\n          };\n          function getDateFormattedString () {\n            if (!controller.$modelValue || !controller.$modelValue.startDate || isNaN(controller.$modelValue.startDate.getTime())) {\n              return '';\n            }\n            var html = formatDate(controller.$modelValue.startDate, options.dateFormat);\n            if (controller.$modelValue.compare && controller.$modelValue.compareStartDate && !isNaN(controller.$modelValue.compareStartDate.getTime())) {\n              html += ' vs ' + formatDate(controller.$modelValue.compareStartDate, options.dateFormat);\n            } else if (!controller.$modelValue.compare && controller.$modelValue.endDate && !isNaN(controller.$modelValue.endDate.getTime())) {\n              html += ' / ' + formatDate(controller.$modelValue.endDate, options.dateFormat);\n            }\n            return html;\n          }\n          scope.$on('$destroy', function () {\n            if (rangedatepicker) rangedatepicker.destroy();\n            options = null;\n            rangedatepicker = null;\n          });\n        }\n      };\n    }])\n  .provider('rangedatepickerViews', function () {\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n    function mod (n, m) {\n      return (n % m + m) % m;\n    }\n    this.$get = ['$dateFormatter', '$dateParser', '$sce', function ($dateFormatter, $dateParser, $sce) {\n      return function (picker) {\n        var scope = picker.$scope;\n        var options = picker.$options;\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = (picker.$date && picker.$date[0]) || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var endDate = (picker.$date && picker.$date[1]) || (options.endDate ? dateParser.getDateForAttribute('endDate', options.endDate) : new Date());\n        var viewDate = {\n          startDate: {\n            year: startDate.getFullYear(),\n            month: startDate.getMonth(),\n            date: startDate.getDate()\n          },\n          endDate: {\n            year: endDate.getFullYear(),\n            month: endDate.getMonth(),\n            date: endDate.getDate()\n          }\n        };\n        var view = {\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (sDate, eDate, force) {\n            viewDate.startDate = {\n              year: sDate.getFullYear(),\n              month: sDate.getMonth(),\n              date: sDate.getDate()\n            };\n            viewDate.endDate = {\n              year: eDate.getFullYear(),\n              month: eDate.getMonth(),\n              date: eDate.getDate()\n            };\n            picker.$build();\n          },\n          build: function () {\n            var that = this;\n            scope.title = [];\n            scope.rows = [];\n            ['startDate', 'endDate'].forEach(function (value, index) {\n              var item = viewDate[value];\n              var firstDayOfMonth = new Date(item.year, item.month, 1);\n              var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n              var firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 6e4);\n              var days = [];\n              var day;\n              for (var i = 0; i < 42; i++) {\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({\n                  date: day,\n                  isToday: day.toDateString() === today,\n                  label: formatDate(day, that.format),\n                  selected: picker.$date && picker.$date[index] && (!picker.$getCompare() || (picker.$getCompare() && !index)) && that.isSelected(picker.$date[index], day),\n                  inRange: that.isInRange(day),\n                  muted: day.getMonth() !== item.month,\n                  disabled: (index === 1 && scope.ctrl.compare) || that.isDisabled(day, index),\n                  compareSelect: index === 0 && scope.ctrl.compare && picker.$compareDate && picker.$compareDate[index] && that.isSelected(picker.$compareDate[index], day)\n                });\n              }\n              scope.title[index] = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.rows[index] = split(days, that.split);\n            });\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            // set range\n            if (!scope.ctrl.compare) {\n              var flag = false;\n              scope.rangeList.forEach(function (item) {\n                if (item.date.start.toDateString() === picker.$date[0].toDateString() && item.date.end.toDateString() === picker.$date[1].toDateString()) {\n                  scope.ctrl.rangeType = item.value;\n                  flag = true;\n                }\n              });\n              if (!flag) {\n                scope.ctrl.rangeType = '';\n              }\n            }\n            this.built = true;\n          },\n          isSelected: function (currentDate, date) {\n            return currentDate &&\n              date.getFullYear() === currentDate.getFullYear() &&\n              date.getMonth() === currentDate.getMonth() &&\n              date.getDate() === currentDate.getDate();\n          },\n          isInRange: function (date) {\n            if (!picker.$date || picker.$getCompare()) {\n              return false;\n            }\n            var minDate = picker.$date[0];\n            var maxDate = picker.$date[1];\n            if (!angular.isDate(minDate) || !angular.isDate(maxDate) || !angular.isDate(date)) {\n              return false;\n            }\n            return (date.getTime() >= minDate.getTime() && date.getTime() <= maxDate.getTime());\n          },\n          isDisabled: function (date, index) {\n            var time = date.getTime();\n            if (time < Date.parse(options.minDate) || time > Date.parse(options.maxDate)) {\n              return true;\n            }\n            // 开始时间不能选择大于结束时间的事件\n            if (!scope.ctrl.compare && picker.$date && ((index && time < picker.$date[index - 1]) || (time > picker.$date[index + 1]))) {\n              return true;\n            }\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) {\n              return true;\n            }\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n            return false;\n          }\n        };\n        return {\n          view: view,\n          viewDate: viewDate\n        };\n      };\n    } ];\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: pagination/pagination.js\n// 1, 2, 3 ... 10\n// 1 ... 8, 9, 10\n// 1 ... 5, 6, 7 ... 10\nangular.module('mgcrea.ngStrap.pagination', [])\n  .provider('$pagination', function() {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      pageClass: 'pagination',\n      pagesLength: 5,\n      itemsPerPage: 20,\n      templateUrl: 'pagination/pagination.tpl.html'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      /**\n       * 计算页数\n       * @returns {number}\n       */\n      this.calculateTotalPages = function(itemsPerPage, totalItems) {\n        var totalPages = itemsPerPage < 1\n          ? 1\n          : Math.ceil(totalItems / itemsPerPage);\n        return Math.max(totalPages || 0, 1);\n      };\n\n      this.makePage = function (number, text, isActive) {\n        return {\n          number: number,\n          text: text,\n          active: isActive\n        };\n      };\n\n      /**\n       * 获取显示的页码列表\n       * @param currentPage 当前页码\n       * @param totalPages  总页码数\n       * @param pagesLength 总共显示多少页\n       * @returns {Array}\n       */\n      this.getPages = function (currentPage, totalPages, pagesLength) {\n        // 处理传入参数\n        currentPage = currentPage < 1\n          ? 1\n          : ((totalPages > 0 && currentPage > totalPages) ? totalPages : currentPage);\n\n        var pages = [];\n        var i;\n\n        if (totalPages <= pagesLength) {\n          for (i = 1; i <= totalPages; i++){\n            pages.push(this.makePage(i, i, i === currentPage));\n          }\n        }\n        else { // 总页数大于分页长度（此时分为三种情况：1.右边有...2.左边有...3.左右都有...）\n          // 计算中心偏移量\n          var offset = (pagesLength - 1) / 2;\n          if (currentPage <= offset) {\n            // 左边没有...\n            for (i = 1; i <= offset + 1; i++){\n              pages.push(this.makePage(i, i, i === currentPage));\n            }\n            pages.push(this.makePage(i + 1, '...', false));\n            pages.push(this.makePage(totalPages, totalPages, false));\n          }\n          else if (currentPage > totalPages - offset) {\n            pages.push(this.makePage(1, 1, false));\n            pages.push(this.makePage(totalPages - offset - 1, '...', false));\n            for(i = offset; i >= 0; i--){\n              var p = totalPages - i;\n              pages.push(this.makePage(p, p, p === currentPage));\n            }\n          }\n          else {\n            // 最后一种情况，两边都有...\n            pages.push(this.makePage(1, 1, false));\n            // 当前页面显示居中位置\n            var half = Math.ceil(offset / 2);\n            pages.push(this.makePage(currentPage - half - 1, '...', false));\n            for(i = half; i >= 1; i--){\n              pages.push(this.makePage(currentPage - i, currentPage - i, false));\n            }\n            pages.push(this.makePage(currentPage, currentPage, true));\n            for(i = 1; i <= half; i++){\n              pages.push(this.makePage(currentPage + i, currentPage + i, false));\n            }\n            pages.push(this.makePage(currentPage + half + 1, '...', false));\n            pages.push(this.makePage(totalPages, totalPages, false));\n          }\n        }\n        return pages;\n      };\n    };\n    this.$get = function() {\n      var $pagination = {};\n      $pagination.defaults = defaults;\n      $pagination.controller = controller;\n      return $pagination;\n    };\n  })\n  .directive('bsPagination', [ '$window', '$sce', '$parse', '$pagination', function($window, $sce, $parse, $pagination) {\n    var defaults = $pagination.defaults;\n    return {\n      restrict: 'E',\n      require: [ '?ngModel', 'bsPagination' ],\n      scope: true,\n      replace: true,\n      controller: ['$scope', '$element', '$attrs', $pagination.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.templateUrl;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n        var ngModelCtrl = controllers[0];\n        var bsPaginationCtrl = controllers[1];\n\n        if (!ngModelCtrl) {\n          return;\n        }\n\n        var options = angular.copy(defaults);\n\n        // 这里的参数不需要动态改变\n        angular.forEach(['pageClass', 'pagesLength', 'itemsPerPage'], function (key) {\n          if (angular.isDefined(attrs[key])) {\n            options[key] = scope.$eval(attrs[key]);\n          }\n        });\n        angular.forEach(['onChange'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attrs[bsKey])) {\n            options[key] = scope.$eval(attrs[bsKey]);\n          }\n        });\n        // totalItems需要动态改变，显示loading，no result等\n        if (attrs['totalItems']) {\n          attrs.$observe('totalItems', function (newValue, oldValue) {\n            scope.totalItems = newValue;\n            scope.totalPages = bsPaginationCtrl.calculateTotalPages(options.itemsPerPage, scope.totalItems);\n            ngModelCtrl.$render();\n          });\n        }\n\n        scope.$pageClass = options.pageClass;\n        // pageLength需要是奇数\n        if (options.pagesLength % 2 === 0) {\n          options.pagesLength = options.pagesLength + 1;\n        }\n\n        /**\n         * 将model的值赋给page变量\n         */\n        ngModelCtrl.$render = function () {\n          scope.page = (scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1) > scope.totalPages ? scope.totalPages : scope.page;\n          if (scope.page > 0 && scope.page <= scope.totalPages) {\n            scope.pages = bsPaginationCtrl.getPages(scope.page, scope.totalPages, options.pagesLength);\n          }\n        };\n\n        /**\n         * 切换页码\n         * @param page\n         * @param evt\n         */\n        scope.selectPage = function (page, evt) {\n          if (evt) {\n            evt.preventDefault();\n          }\n          if (scope.page !== page && page > 0 && page <= scope.totalPages) {\n            if (evt && evt.target) {\n              evt.target.blur();\n            }\n            // 重新分页\n            ngModelCtrl.$setViewValue(page);\n            ngModelCtrl.$render();\n\n            if (angular.isDefined(options.onChange) && angular.isFunction(options.onChange)) {\n              // 通过observe建立双向绑定\n              options.onChange();\n            }\n          }\n        };\n\n        scope.noPrevious = function () {\n          return scope.page === 1;\n        };\n\n        scope.noNext = function () {\n          return scope.page === scope.totalPages;\n        };\n\n        scope.selectPrevious = function (evt) {\n          scope.selectPage(scope.page - 1, evt);\n        };\n\n        scope.selectNext = function (evt) {\n          scope.selectPage(scope.page + 1, evt);\n        };\n      }\n    };\n  }]);\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', [ 'mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions' ])\n  .provider('$modal', function() {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n    this.$get = [ '$window', '$rootScope', '$bsCompiler', '$animate', '$timeout', '$sce', 'dimensions', function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n      var validSizes = {\n        lg: 'modal-dialog-lg',\n        sm: 'modal-dialog-sm'\n      };\n      function ModalFactory(config) {\n        var $modal = {};\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n        forEach([ 'title', 'content' ], function(key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        $modal.$isShown = scope.$isShown = false;\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        promise.then(function(data) {\n          compileData = data;\n          $modal.init();\n        });\n        $modal.init = function() {\n          if (options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n        };\n        $modal.destroy = function() {\n          destroyModalElement();\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n          scope.$destroy();\n        };\n        $modal.show = function() {\n          if ($modal.$isShown) return;\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          }\n          else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n          if (options.backdrop) {\n            setScrollBar();\n          }\n          if (modalElement) {\n            destroyModalElement();\n          }\n          modalScope = $modal.$scope.$new();\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\n          if (options.backdrop) {\n            modalElement.css({\n              'z-index': dialogBaseZindex + backdropCount * 20\n            });\n            backdropElement.css({\n              'z-index': backdropBaseZindex + backdropCount * 20\n            });\n            backdropCount++;\n          }\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n          modalElement.css({\n            display: 'block'\n          }).addClass(options.placement);\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n        $modal.hide = function() {\n          if (!$modal.$isShown) return;\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n          if (options.backdrop) {\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n        function leaveAnimateCallback() {\n          if (options.backdrop) {\n            resetScrollBar();\n          }\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n        $modal.toggle = function() {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n        $modal.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n        function bindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n        function unbindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n        function bindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n        function unbindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n        function hideOnBackdropClick(evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n        function destroyModalElement() {\n          if ($modal.$isShown && modalElement !== null) {\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n        function setScrollBar() {\n          var scrollDiv = document.createElement('div');\n          scrollDiv.className = 'modal-scrollbar-measure';\n          bodyElement.append(scrollDiv);\n          var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n          bodyElement[0].removeChild(scrollDiv);\n\n          var fullWindowWidth = window.innerWidth;\n          if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n            var documentElementRect = document.documentElement.getBoundingClientRect();\n            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n          }\n          var bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n\n          if (bodyIsOverflowing) bodyElement.css('padding-right', scrollbarWidth + 'px');\n        }\n        function resetScrollBar() {\n          bodyElement.css('padding-right', 0);\n        }\n        return $modal;\n      }\n      function safeDigest(scope) {\n        scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();\n      }\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n      return ModalFactory;\n    } ];\n  }).directive('bsModal', [ '$window', '$sce', '$parse', '$modal', function($window, $sce, $parse, $modal) {\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex' ], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach([ 'backdrop', 'keyboard', 'html', 'container' ], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n        angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n        angular.forEach([ 'title', 'content' ], function(key) {\n          if (attr[key]) {\n            attr.$observe(key, function(newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function(newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n        var modal = $modal(options);\n        element.on(attr.trigger || 'click', modal.toggle);\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n      }\n    };\n  } ]);\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datetimepicker/datetimepicker.js\n/**\n * Created by xiashan on 17/12/8.\n */\nangular.module('mgcrea.ngStrap.datetimepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n  .provider('datetimepickerViews', function () {\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n    function mod (n, m) {\n      return (n % m + m) % m;\n    }\n    this.$get = ['$dateFormatter', '$dateParser', '$sce', function ($dateFormatter, $dateParser, $sce) {\n      function DatetimepickerViewsFactory (picker) {\n        var scope = picker.$scope;\n        var options = picker.$options;\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var format = $dateFormatter.getDatetimeFormat(options.dateFormat, lang);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate(),\n          hour: startDate.getHours(),\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n        var views = [\n          {\n            hourFormat: options.hourFormat,\n            minuteFormat: options.minuteFormat,\n            secondFormat: options.secondFormat,\n            split: 7,\n            steps: {\n              date: 1\n            },\n            update: function (date, force) {\n              if (angular.isDate(date) && !isNaN(date.getTime())) {\n                // picker.$date === date\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate(),\n                  hour: picker.$date.getHours(),\n                  minute: picker.$date.getMinutes(),\n                  second: picker.$date.getSeconds(),\n                  millisecond: picker.$date.getMilliseconds()\n                });\n                picker.$build();\n              } else if (!this.built || force) {\n                picker.$build();\n              }\n            },\n            build: function () {\n              var i;\n              var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n              var hours = [];\n              var hour;\n              var step;\n              for (i = 0; i < options.length; i++) {\n                // hour = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour - (midIndex - i) * options.hourStep);\n                step = viewDate.hour - (midIndex - i) * options.hourStep;\n                step = step < 0 ? (24 + step) : step;\n                hour = new Date(viewDate.year, viewDate.month, viewDate.date, step, viewDate.minute, viewDate.second);\n                hours.push({\n                  date: hour,\n                  label: formatDate(hour, this.hourFormat),\n                  selected: picker.$date && this.isSelected(hour, 0),\n                  disabled: this.isDisabled(hour, 0)\n                  // selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n                  // disabled: $timepicker.$isDisabled(hour, 0)\n                });\n              }\n              var minutes = [];\n              var minute;\n              for (i = 0; i < options.length; i++) {\n                // minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n                step = viewDate.minute - (midIndex - i) * options.minuteStep;\n                step = step < 0 ? (60 + step) : step;\n                minute = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, step, viewDate.second);\n                minutes.push({\n                  date: minute,\n                  label: formatDate(minute, this.minuteFormat),\n                  selected: picker.$date && this.isSelected(minute, 1),\n                  disabled: this.isDisabled(minute, 1)\n                });\n              }\n              var seconds = [];\n              var second;\n              for (i = 0; i < options.length; i++) {\n                // second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n                step = viewDate.second - (midIndex - i) * options.secondStep;\n                step = step < 0 ? (60 + step) : step;\n                second = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, viewDate.minute, step);\n                seconds.push({\n                  date: second,\n                  label: formatDate(second, this.secondFormat),\n                  selected: picker.$date && this.isSelected(second, 2),\n                  disabled: this.isDisabled(second, 2)\n                });\n              }\n              var rows = [];\n              for (i = 0; i < options.length; i++) {\n                if (showSeconds) {\n                  rows.push([hours[i], minutes[i], seconds[i]]);\n                } else {\n                  rows.push([hours[i], minutes[i]]);\n                }\n              }\n              scope.title = formatDate(new Date(viewDate.year, viewDate.month, viewDate.date), options.timeTitleFormat);\n              scope.rows = rows;\n              scope.showSeconds = showSeconds;\n              scope.timeSeparator = timeSeparator;\n              this.built = true;\n            },\n            isSelected: function (date, index) {\n              if (!picker.$date) {\n                return false;\n              } else if (index === 0) {\n                return date.getHours() === picker.$date.getHours();\n              } else if (index === 1) {\n                return date.getMinutes() === picker.$date.getMinutes();\n              } else if (index === 2) {\n                return date.getSeconds() === picker.$date.getSeconds();\n              }\n              return false;\n            },\n            isDisabled: function (date, index) {\n              var time = date.getTime();\n              return options.minDate && angular.isDate(options.minDate) && time < options.minDate.getTime() ||\n                (options.maxDate && angular.isDate(options.maxDate) && time > options.maxDate.getTime());\n            },\n            onKeyDown: function (evt) {\n              if (!picker.$date) {\n                return;\n              }\n            }\n          },\n          {\n            format: options.dayFormat,\n            split: 7,\n            steps: {\n              month: 1\n            },\n            update: function (date, force) {\n              if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$build();\n              } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function () {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n              var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n              var firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 6e4);\n              var days = [];\n              var day;\n              for (var i = 0; i < 42; i++) {\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({\n                  date: day,\n                  isToday: day.toDateString() === today,\n                  label: formatDate(day, this.format),\n                  selected: picker.$date && this.isSelected(day),\n                  muted: day.getMonth() !== viewDate.month,\n                  disabled: this.isDisabled(day)\n                });\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              scope.isTodayDisabled = this.isDisabled(new Date());\n              this.built = true;\n            },\n            isSelected: function (date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function (date) {\n              var time = date.getTime();\n              if (options.minDate && angular.isDate(options.minDate)) {\n                var minDate = new Date(options.minDate.getFullYear(), options.minDate.getMonth(), options.minDate.getDate(), 0, 0, 0);\n                if (time < Date.parse(minDate)) {\n                  return true;\n                }\n              }\n              if (options.maxDate && angular.isDate(options.maxDate)) {\n                var maxDate = new Date(options.maxDate.getFullYear(), options.maxDate.getMonth(), options.maxDate.getDate() + 1, 0, 0, 0);\n                if (time >= Date.parse(maxDate)) {\n                  return true;\n                }\n              }\n              // if (time < Date.parse(options.minDate) || time > Date.parse(options.maxDate)) return true;\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n              return false;\n            },\n            onKeyDown: function (evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n              if (evt.keyCode === 37) {\n                newDate = new Date(actualTime - 1 * 864e5);\n              } else if (evt.keyCode === 38) {\n                newDate = new Date(actualTime - 7 * 864e5);\n              } else if (evt.keyCode === 39) {\n                newDate = new Date(actualTime + 1 * 864e5);\n              } else if (evt.keyCode === 40) {\n                newDate = new Date(actualTime + 7 * 864e5);\n              }\n              if (!this.isDisabled(newDate)) {\n                picker.select(newDate, true);\n              }\n            }\n          },\n          {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: {\n              year: 1\n            },\n            update: function (date, force) {\n              if (!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$build();\n              } else if (date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$updateSelected();\n              }\n            },\n            build: function () {\n              var months = [];\n              var month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({\n                  date: month,\n                  label: formatDate(month, this.format),\n                  selected: picker.$isSelected(month),\n                  disabled: this.isDisabled(month)\n                });\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n              if (evt.keyCode === 37) {\n                newDate.setMonth(actualMonth - 1);\n              } else if (evt.keyCode === 38) {\n                newDate.setMonth(actualMonth - 4);\n              } else if (evt.keyCode === 39) {\n                newDate.setMonth(actualMonth + 1);\n              } else if (evt.keyCode === 40) {\n                newDate.setMonth(actualMonth + 4);\n              }\n              if (!this.isDisabled(newDate)) {\n                picker.select(newDate, true);\n              }\n            }\n          },\n          {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: {\n              year: 12\n            },\n            update: function (date, force) {\n              if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$build();\n              } else if (date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$updateSelected();\n              }\n            },\n            build: function () {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [];\n              var year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({\n                  date: year,\n                  label: formatDate(year, this.format),\n                  selected: picker.$isSelected(year),\n                  disabled: this.isDisabled(year)\n                });\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function (date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function (date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function (evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear();\n              var newDate = new Date(picker.$date);\n              if (evt.keyCode === 37) {\n                newDate.setYear(actualYear - 1);\n              } else if (evt.keyCode === 38) {\n                newDate.setYear(actualYear - 4);\n              } else if (evt.keyCode === 39) {\n                newDate.setYear(actualYear + 1);\n              } else if (evt.keyCode === 40) {\n                newDate.setYear(actualYear + 4);\n              }\n              if (!this.isDisabled(newDate)) {\n                picker.select(newDate, true);\n              }\n            }\n          }];\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n      }\n      return DatetimepickerViewsFactory;\n    }];\n  })\n  .provider('$datetimepicker', function() {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datetimepicker/datetimepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      hourFormat: 'HH',\n      minuteFormat: 'mm',\n      secondFormat: 'ss',\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      timeTitleFormat: 'dd MMM',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 1,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'nox-sort-up',\n      iconDown: 'nox-sort-down',\n      iconLeft: 'nox-sort-left',\n      iconRight: 'nox-sort-right',\n      arrowBehavior: 'pager'\n    };\n    this.$get = ['$window', '$document', '$rootScope', '$sce', '$dateFormatter', 'datetimepickerViews', '$tooltip', '$timeout', function ($window, $document, $rootScope, $sce, $dateFormatter, datetimepickerViews, $tooltip, $timeout) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n      var isTouch = 'createTouch' in $window.document && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n      function DatetimepickerFactory (element, controller, config) {\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n        var pickerViews = datetimepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$selectTime = function(date, index) {\n          $datepicker.selectTime(date, index);\n        };\n        scope.$arrowAction = function(value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $datepicker.$setTimeByStep(value, index);\n          } else {\n            $datepicker.$moveIndex(value, index);\n          }\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function() {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function() {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        $datepicker.update = function(date) {\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          $datepicker.$build(true);\n        };\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n        $datepicker.select = function(date, keep) {\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function() {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate(),\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n        $datepicker.selectTime = function(date, index, keep) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = new Date();\n          }\n          if (!angular.isDate(date)) {\n            date = new Date(date);\n          }\n          controller.$dateValue.setFullYear(date.getFullYear());\n          controller.$dateValue.setMonth(date.getMonth());\n          controller.$dateValue.setDate(date.getDate());\n          if (index === 0) {\n            controller.$dateValue.setHours(date.getHours());\n          } else if (index === 1) {\n            controller.$dateValue.setMinutes(date.getMinutes());\n          } else if (index === 2) {\n            controller.$dateValue.setSeconds(date.getSeconds());\n          }\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              // $datepicker.setMode(options.startView);\n              $datepicker.hide(true);\n            });\n          }\n        };\n        $datepicker.setMode = function(mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n        $datepicker.$build = function(pristine) {\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n        $datepicker.$updateSelected = function() {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          var targetDate = new Date(Date.UTC(\n            viewDate.year + (steps.year || 0) * value,\n            viewDate.month + (steps.month || 0) * value,\n            steps.date ? (viewDate.date + steps.date * value) : 1\n          ));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n        $datepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($datepicker.$date);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - parseInt(options.hourStep, 10) * value);\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - parseInt(options.minuteStep, 10) * value);\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - parseInt(options.secondStep, 10) * value);\n          }\n          $datepicker.selectTime(newDate, index, true);\n        };\n        $datepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour + value * options.length, viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, viewDate.minute + value * options.length * options.minuteStep, viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, viewDate.minute, viewDate.second + value * options.length * options.secondStep);\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $datepicker.$build();\n        };\n        $datepicker.$onMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function() {\n                $datepicker.setMode(scope.$mode - 1);\n              });\n            }\n            return;\n          }\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n        function focusElement() {\n          element[0].focus();\n        }\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n          _show();\n          $timeout(function() {\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n        return $datepicker;\n      }\n      DatetimepickerFactory.defaults = defaults;\n      return DatetimepickerFactory;\n    }];\n  })\n  .directive('bsDatetimepicker', [ '$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$datetimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datetimepicker) {\n    var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n        var options = {\n          scope: scope\n        };\n        angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear' ], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach([ 'html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear' ], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n        angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n        var datepicker = $datetimepicker(element, controller, options);\n        options = datepicker.$options;\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function(newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n        angular.forEach([ 'minDate', 'maxDate' ], function(key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function(newValue) {\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function(newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n        controller.$parsers.unshift(function(viewValue) {\n          var date;\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1e3;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n        controller.$formatters.push(function(modelValue) {\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1e3);\n          } else {\n            date = new Date(modelValue);\n          }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n        controller.$render = function() {\n          element.val(getDateFormattedString());\n        };\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n        scope.$on('$destroy', function() {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n      }\n    };\n  }]);\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [ 'mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip' ]).provider('$datepicker', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    prefixClass: 'datepicker',\n    placement: 'bottom-left',\n    templateUrl: 'datepicker/datepicker.tpl.html',\n    trigger: 'focus',\n    container: false,\n    keyboard: true,\n    html: false,\n    delay: 0,\n    useNative: false,\n    dateType: 'date',\n    dateFormat: 'shortDate',\n    timezone: null,\n    modelDateFormat: null,\n    dayFormat: 'dd',\n    monthFormat: 'MMM',\n    yearFormat: 'yyyy',\n    monthTitleFormat: 'MMMM yyyy',\n    yearTitleFormat: 'yyyy',\n    strictFormat: false,\n    autoclose: false,\n    minDate: -Infinity,\n    maxDate: +Infinity,\n    startView: 0,\n    minView: 0,\n    startWeek: 0,\n    daysOfWeekDisabled: '',\n    hasToday: false,\n    hasClear: false,\n    iconLeft: 'nox-sort-left',\n    iconRight: 'nox-sort-right'\n  };\n  this.$get = [ '$window', '$document', '$rootScope', '$sce', '$dateFormatter', 'datepickerViews', '$tooltip', '$timeout', function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n    var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n    var isTouch = 'createTouch' in $window.document && isNative;\n    if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n    function DatepickerFactory(element, controller, config) {\n      var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n      var parentScope = config.scope;\n      var options = $datepicker.$options;\n      var scope = $datepicker.$scope;\n      if (options.startView) options.startView -= options.minView;\n      var pickerViews = datepickerViews($datepicker);\n      $datepicker.$views = pickerViews.views;\n      var viewDate = pickerViews.viewDate;\n      scope.$mode = options.startView;\n      scope.$iconLeft = options.iconLeft;\n      scope.$iconRight = options.iconRight;\n      scope.$hasToday = options.hasToday;\n      scope.$hasClear = options.hasClear;\n      var $picker = $datepicker.$views[scope.$mode];\n      scope.$select = function(date) {\n        $datepicker.select(date);\n      };\n      scope.$selectPane = function(value) {\n        $datepicker.$selectPane(value);\n      };\n      scope.$toggleMode = function() {\n        $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n      };\n      scope.$setToday = function() {\n        if (options.autoclose) {\n          $datepicker.setMode(0);\n          $datepicker.select(new Date());\n        } else {\n          $datepicker.select(new Date(), true);\n        }\n      };\n      scope.$clear = function() {\n        if (options.autoclose) {\n          $datepicker.setMode(0);\n          $datepicker.select(null);\n        } else {\n          $datepicker.select(null, true);\n        }\n      };\n      $datepicker.update = function(date) {\n        if (angular.isDate(date) && !isNaN(date.getTime())) {\n          $datepicker.$date = date;\n          $picker.update.call($picker, date);\n        }\n        $datepicker.$build(true);\n      };\n      $datepicker.updateDisabledDates = function(dateRanges) {\n        options.disabledDateRanges = dateRanges;\n        for (var i = 0, l = scope.rows.length; i < l; i++) {\n          angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n        }\n      };\n      $datepicker.select = function(date, keep) {\n        if (angular.isDate(date)) {\n          if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = new Date(date);\n          }\n        } else {\n          controller.$dateValue = null;\n        }\n        if (!scope.$mode || keep) {\n          controller.$setViewValue(angular.copy(date));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              $datepicker.hide(true);\n            });\n          }\n        } else {\n          angular.extend(viewDate, {\n            year: date.getFullYear(),\n            month: date.getMonth(),\n            date: date.getDate()\n          });\n          $datepicker.setMode(scope.$mode - 1);\n          $datepicker.$build();\n        }\n      };\n      $datepicker.setMode = function(mode) {\n        scope.$mode = mode;\n        $picker = $datepicker.$views[scope.$mode];\n        $datepicker.$build();\n      };\n      $datepicker.$build = function(pristine) {\n        if (pristine === true && $picker.built) return;\n        if (pristine === false && !$picker.built) return;\n        $picker.build.call($picker);\n      };\n      $datepicker.$updateSelected = function() {\n        for (var i = 0, l = scope.rows.length; i < l; i++) {\n          angular.forEach(scope.rows[i], updateSelected);\n        }\n      };\n      $datepicker.$isSelected = function(date) {\n        return $picker.isSelected(date);\n      };\n      $datepicker.$setDisabledEl = function(el) {\n        el.disabled = $picker.isDisabled(el.date);\n      };\n      $datepicker.$selectPane = function(value) {\n        var steps = $picker.steps;\n        var targetDate = new Date(Date.UTC(viewDate.year + (steps.year || 0) * value, viewDate.month + (steps.month || 0) * value, 1));\n        angular.extend(viewDate, {\n          year: targetDate.getUTCFullYear(),\n          month: targetDate.getUTCMonth(),\n          date: targetDate.getUTCDate()\n        });\n        $datepicker.$build();\n      };\n      $datepicker.$onMouseDown = function(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (isTouch) {\n          var targetEl = angular.element(evt.target);\n          if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n            targetEl = targetEl.parent();\n          }\n          targetEl.triggerHandler('click');\n        }\n      };\n      $datepicker.$onKeyDown = function(evt) {\n        if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (evt.keyCode === 13) {\n          if (!scope.$mode) {\n            $datepicker.hide(true);\n          } else {\n            scope.$apply(function() {\n              $datepicker.setMode(scope.$mode - 1);\n            });\n          }\n          return;\n        }\n        $picker.onKeyDown(evt);\n        parentScope.$digest();\n      };\n      function updateSelected(el) {\n        el.selected = $datepicker.$isSelected(el.date);\n      }\n      function focusElement() {\n        element[0].focus();\n      }\n      var _init = $datepicker.init;\n      $datepicker.init = function() {\n        if (isNative && options.useNative) {\n          element.prop('type', 'date');\n          element.css('-webkit-appearance', 'textfield');\n          return;\n        } else if (isTouch) {\n          element.prop('type', 'text');\n          element.attr('readonly', 'true');\n          element.on('click', focusElement);\n        }\n        _init();\n      };\n      var _destroy = $datepicker.destroy;\n      $datepicker.destroy = function() {\n        if (isNative && options.useNative) {\n          element.off('click', focusElement);\n        }\n        _destroy();\n      };\n      var _show = $datepicker.show;\n      $datepicker.show = function() {\n        if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n        _show();\n        $timeout(function() {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.on('keydown', $datepicker.$onKeyDown);\n          }\n        }, 0, false);\n      };\n      var _hide = $datepicker.hide;\n      $datepicker.hide = function(blur) {\n        if (!$datepicker.$isShown) return;\n        $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n        if (options.keyboard) {\n          element.off('keydown', $datepicker.$onKeyDown);\n        }\n        _hide(blur);\n      };\n      return $datepicker;\n    }\n    DatepickerFactory.defaults = defaults;\n    return DatepickerFactory;\n  } ];\n}).directive('bsDatepicker', [ '$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$datepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n  var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n  return {\n    restrict: 'EAC',\n    require: 'ngModel',\n    link: function postLink(scope, element, attr, controller) {\n      var options = {\n        scope: scope\n      };\n      angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear' ], function(key) {\n        if (angular.isDefined(attr[key])) options[key] = attr[key];\n      });\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach([ 'html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear' ], function(key) {\n        if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n          options[key] = false;\n        }\n      });\n      angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n        var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n        if (angular.isDefined(attr[bsKey])) {\n          options[key] = scope.$eval(attr[bsKey]);\n        }\n      });\n      var datepicker = $datepicker(element, controller, options);\n      options = datepicker.$options;\n      if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n      var lang = options.lang;\n      var formatDate = function(date, format) {\n        return $dateFormatter.formatDate(date, format, lang);\n      };\n      var dateParser = $dateParser({\n        format: options.dateFormat,\n        lang: lang,\n        strict: options.strictFormat\n      });\n      if (attr.bsShow) {\n        scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!datepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          if (newValue === true) {\n            datepicker.show();\n          } else {\n            datepicker.hide();\n          }\n        });\n      }\n      angular.forEach([ 'minDate', 'maxDate' ], function(key) {\n        if (angular.isDefined(attr[key])) {\n          attr.$observe(key, function(newValue) {\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        }\n      });\n      if (angular.isDefined(attr.dateFormat)) {\n        attr.$observe('dateFormat', function(newValue) {\n          datepicker.$options.dateFormat = newValue;\n        });\n      }\n      scope.$watch(attr.ngModel, function(newValue, oldValue) {\n        datepicker.update(controller.$dateValue);\n      }, true);\n      function normalizeDateRanges(ranges) {\n        if (!ranges || !ranges.length) return null;\n        return ranges;\n      }\n      if (angular.isDefined(attr.disabledDates)) {\n        scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n          disabledRanges = normalizeDateRanges(disabledRanges);\n          previousValue = normalizeDateRanges(previousValue);\n          if (disabledRanges) {\n            datepicker.updateDisabledDates(disabledRanges);\n          }\n        });\n      }\n      function validateAgainstMinMaxDate(parsedDate) {\n        if (!angular.isDate(parsedDate)) return;\n        var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n        var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n        var isValid = isMinValid && isMaxValid;\n        controller.$setValidity('date', isValid);\n        controller.$setValidity('min', isMinValid);\n        controller.$setValidity('max', isMaxValid);\n        if (isValid) controller.$dateValue = parsedDate;\n      }\n      controller.$parsers.unshift(function(viewValue) {\n        var date;\n        if (!viewValue) {\n          controller.$setValidity('date', true);\n          return null;\n        }\n        var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n        if (!parsedDate || isNaN(parsedDate.getTime())) {\n          controller.$setValidity('date', false);\n          return;\n        }\n        validateAgainstMinMaxDate(parsedDate);\n        if (options.dateType === 'string') {\n          date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n          return formatDate(date, options.modelDateFormat || options.dateFormat);\n        }\n        date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n        if (options.dateType === 'number') {\n          return date.getTime();\n        } else if (options.dateType === 'unix') {\n          return date.getTime() / 1e3;\n        } else if (options.dateType === 'iso') {\n          return date.toISOString();\n        }\n        return new Date(date);\n      });\n      controller.$formatters.push(function(modelValue) {\n        var date;\n        if (angular.isUndefined(modelValue) || modelValue === null) {\n          date = NaN;\n        } else if (angular.isDate(modelValue)) {\n          date = modelValue;\n        } else if (options.dateType === 'string') {\n          date = dateParser.parse(modelValue, null, options.modelDateFormat);\n        } else if (options.dateType === 'unix') {\n          date = new Date(modelValue * 1e3);\n        } else {\n          date = new Date(modelValue);\n        }\n        controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n        return getDateFormattedString();\n      });\n      controller.$render = function() {\n        element.val(getDateFormattedString());\n      };\n      function getDateFormattedString() {\n        return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n      }\n      scope.$on('$destroy', function() {\n        if (datepicker) datepicker.destroy();\n        options = null;\n        datepicker = null;\n      });\n    }\n  };\n} ]).provider('datepickerViews', function() {\n  function split(arr, size) {\n    var arrays = [];\n    while (arr.length > 0) {\n      arrays.push(arr.splice(0, size));\n    }\n    return arrays;\n  }\n  function mod(n, m) {\n    return (n % m + m) % m;\n  }\n  this.$get = [ '$dateFormatter', '$dateParser', '$sce', function($dateFormatter, $dateParser, $sce) {\n    return function(picker) {\n      var scope = picker.$scope;\n      var options = picker.$options;\n      var lang = options.lang;\n      var formatDate = function(date, format) {\n        return $dateFormatter.formatDate(date, format, lang);\n      };\n      var dateParser = $dateParser({\n        format: options.dateFormat,\n        lang: lang,\n        strict: options.strictFormat\n      });\n      var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n      var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n      var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n      var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n      var viewDate = {\n        year: startDate.getFullYear(),\n        month: startDate.getMonth(),\n        date: startDate.getDate()\n      };\n      var views = [ {\n        format: options.dayFormat,\n        split: 7,\n        steps: {\n          month: 1\n        },\n        update: function(date, force) {\n          if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$build();\n          } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n            viewDate.date = picker.$date.getDate();\n            picker.$updateSelected();\n          }\n        },\n        build: function() {\n          var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n          var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n          var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n          var firstDateOffset = firstDate.getTimezoneOffset();\n          var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n          if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 6e4);\n          var days = [];\n          var day;\n          for (var i = 0; i < 42; i++) {\n            day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n            days.push({\n              date: day,\n              isToday: day.toDateString() === today,\n              label: formatDate(day, this.format),\n              selected: picker.$date && this.isSelected(day),\n              muted: day.getMonth() !== viewDate.month,\n              disabled: this.isDisabled(day)\n            });\n          }\n          scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n          scope.showLabels = true;\n          scope.labels = weekDaysLabelsHtml;\n          scope.rows = split(days, this.split);\n          scope.isTodayDisabled = this.isDisabled(new Date());\n          this.built = true;\n        },\n        isSelected: function(date) {\n          return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n        },\n        isDisabled: function(date) {\n          var time = date.getTime();\n          if (time < Date.parse(options.minDate) || time > Date.parse(options.maxDate)) return true;\n          if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n          if (options.disabledDateRanges) {\n            for (var i = 0; i < options.disabledDateRanges.length; i++) {\n              if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                return true;\n              }\n            }\n          }\n          return false;\n        },\n        onKeyDown: function(evt) {\n          if (!picker.$date) {\n            return;\n          }\n          var actualTime = picker.$date.getTime();\n          var newDate;\n          if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5); else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5); else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5); else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n          if (!this.isDisabled(newDate)) picker.select(newDate, true);\n        }\n      }, {\n        name: 'month',\n        format: options.monthFormat,\n        split: 4,\n        steps: {\n          year: 1\n        },\n        update: function(date, force) {\n          if (!this.built || date.getFullYear() !== viewDate.year) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$build();\n          } else if (date.getMonth() !== viewDate.month) {\n            angular.extend(viewDate, {\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$updateSelected();\n          }\n        },\n        build: function() {\n          var months = [];\n          var month;\n          for (var i = 0; i < 12; i++) {\n            month = new Date(viewDate.year, i, 1);\n            months.push({\n              date: month,\n              label: formatDate(month, this.format),\n              selected: picker.$isSelected(month),\n              disabled: this.isDisabled(month)\n            });\n          }\n          scope.title = formatDate(month, options.yearTitleFormat);\n          scope.showLabels = false;\n          scope.rows = split(months, this.split);\n          this.built = true;\n        },\n        isSelected: function(date) {\n          return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n        },\n        isDisabled: function(date) {\n          var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n          return lastDate < options.minDate || date.getTime() > options.maxDate;\n        },\n        onKeyDown: function(evt) {\n          if (!picker.$date) {\n            return;\n          }\n          var actualMonth = picker.$date.getMonth();\n          var newDate = new Date(picker.$date);\n          if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1); else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4); else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1); else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n          if (!this.isDisabled(newDate)) picker.select(newDate, true);\n        }\n      }, {\n        name: 'year',\n        format: options.yearFormat,\n        split: 4,\n        steps: {\n          year: 12\n        },\n        update: function(date, force) {\n          if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$build();\n          } else if (date.getFullYear() !== viewDate.year) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$updateSelected();\n          }\n        },\n        build: function() {\n          var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n          var years = [];\n          var year;\n          for (var i = 0; i < 12; i++) {\n            year = new Date(firstYear + i, 0, 1);\n            years.push({\n              date: year,\n              label: formatDate(year, this.format),\n              selected: picker.$isSelected(year),\n              disabled: this.isDisabled(year)\n            });\n          }\n          scope.title = years[0].label + '-' + years[years.length - 1].label;\n          scope.showLabels = false;\n          scope.rows = split(years, this.split);\n          this.built = true;\n        },\n        isSelected: function(date) {\n          return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n        },\n        isDisabled: function(date) {\n          var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n          return lastDate < options.minDate || date.getTime() > options.maxDate;\n        },\n        onKeyDown: function(evt) {\n          if (!picker.$date) {\n            return;\n          }\n          var actualYear = picker.$date.getFullYear();\n          var newDate = new Date(picker.$date);\n          if (evt.keyCode === 37) newDate.setYear(actualYear - 1); else if (evt.keyCode === 38) newDate.setYear(actualYear - 4); else if (evt.keyCode === 39) newDate.setYear(actualYear + 1); else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n          if (!this.isDisabled(newDate)) picker.select(newDate, true);\n        }\n      } ];\n      return {\n        views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n        viewDate: viewDate\n      };\n    };\n  } ];\n});\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissible: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissible]\n        $alert.$scope.dismissible = !!options.dismissible;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissible'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissible'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.rangedatepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.datetimepicker',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.pagination',\n  'mgcrea.ngStrap.sort'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', [ 'mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip' ]).provider('$timepicker', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    defaultDate: 'auto',\n    prefixClass: 'timepicker',\n    placement: 'bottom-left',\n    templateUrl: 'timepicker/timepicker.tpl.html',\n    trigger: 'focus',\n    container: false,\n    keyboard: true,\n    html: false,\n    delay: 0,\n    useNative: true,\n    timeType: 'date',\n    timeFormat: 'shortTime',\n    timezone: null,\n    modelTimeFormat: null,\n    autoclose: false,\n    minTime: -Infinity,\n    maxTime: +Infinity,\n    length: 5,\n    hourStep: 1,\n    minuteStep: 5,\n    secondStep: 5,\n    roundDisplay: false,\n    iconUp: 'nox-sort-up',\n    iconDown: 'nox-sort-down',\n    arrowBehavior: 'pager'\n  };\n  this.$get = [ '$window', '$document', '$rootScope', '$sce', '$dateFormatter', '$tooltip', '$timeout', function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n    var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n    var isTouch = 'createTouch' in $window.document && isNative;\n    if (!defaults.lang) {\n      defaults.lang = $dateFormatter.getDefaultLocale();\n    }\n    function timepickerFactory(element, controller, config) {\n      var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n      var parentScope = config.scope;\n      var options = $timepicker.$options;\n      var scope = $timepicker.$scope;\n      var lang = options.lang;\n      var formatDate = function(date, format, timezone) {\n        return $dateFormatter.formatDate(date, format, lang, timezone);\n      };\n      function floorMinutes(time) {\n        var coeff = 1e3 * 60 * options.minuteStep;\n        return new Date(Math.floor(time.getTime() / coeff) * coeff);\n      }\n      var selectedIndex = 0;\n      var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n      var startDate = controller.$dateValue || defaultDate;\n      var viewDate = {\n        hour: startDate.getHours(),\n        meridian: startDate.getHours() < 12,\n        minute: startDate.getMinutes(),\n        second: startDate.getSeconds(),\n        millisecond: startDate.getMilliseconds()\n      };\n      var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n      var hoursFormat = $dateFormatter.hoursFormat(format);\n      var timeSeparator = $dateFormatter.timeSeparator(format);\n      var minutesFormat = $dateFormatter.minutesFormat(format);\n      var secondsFormat = $dateFormatter.secondsFormat(format);\n      var showSeconds = $dateFormatter.showSeconds(format);\n      var showAM = $dateFormatter.showAM(format);\n      scope.$iconUp = options.iconUp;\n      scope.$iconDown = options.iconDown;\n      scope.$select = function(date, index) {\n        $timepicker.select(date, index);\n      };\n      scope.$moveIndex = function(value, index) {\n        $timepicker.$moveIndex(value, index);\n      };\n      scope.$switchMeridian = function(date) {\n        $timepicker.switchMeridian(date);\n      };\n      $timepicker.update = function(date) {\n        if (angular.isDate(date) && !isNaN(date.getTime())) {\n          $timepicker.$date = date;\n          angular.extend(viewDate, {\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds(),\n            millisecond: date.getMilliseconds()\n          });\n          $timepicker.$build();\n        } else if (!$timepicker.$isBuilt) {\n          $timepicker.$build();\n        }\n      };\n      $timepicker.select = function(date, index, keep) {\n        if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n          controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n        }\n        if (!angular.isDate(date)) date = new Date(date);\n        if (index === 0) controller.$dateValue.setHours(date.getHours()); else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes()); else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n        controller.$setViewValue(angular.copy(controller.$dateValue));\n        controller.$render();\n        if (options.autoclose && !keep) {\n          $timeout(function() {\n            $timepicker.hide(true);\n          });\n        }\n      };\n      $timepicker.switchMeridian = function(date) {\n        if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n          return;\n        }\n        var hours = (date || controller.$dateValue).getHours();\n        controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n        controller.$setViewValue(angular.copy(controller.$dateValue));\n        controller.$render();\n      };\n      $timepicker.$build = function() {\n        var i;\n        var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n        var hours = [];\n        var hour;\n        for (i = 0; i < options.length; i++) {\n          hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n          hours.push({\n            date: hour,\n            label: formatDate(hour, hoursFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n            disabled: $timepicker.$isDisabled(hour, 0)\n          });\n        }\n        var minutes = [];\n        var minute;\n        for (i = 0; i < options.length; i++) {\n          minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n          minutes.push({\n            date: minute,\n            label: formatDate(minute, minutesFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n            disabled: $timepicker.$isDisabled(minute, 1)\n          });\n        }\n        var seconds = [];\n        var second;\n        for (i = 0; i < options.length; i++) {\n          second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n          seconds.push({\n            date: second,\n            label: formatDate(second, secondsFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n            disabled: $timepicker.$isDisabled(second, 2)\n          });\n        }\n        var rows = [];\n        for (i = 0; i < options.length; i++) {\n          if (showSeconds) {\n            rows.push([ hours[i], minutes[i], seconds[i] ]);\n          } else {\n            rows.push([ hours[i], minutes[i] ]);\n          }\n        }\n        scope.rows = rows;\n        scope.showSeconds = showSeconds;\n        scope.showAM = showAM;\n        scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n        scope.timeSeparator = timeSeparator;\n        $timepicker.$isBuilt = true;\n      };\n      $timepicker.$isSelected = function(date, index) {\n        if (!$timepicker.$date) return false; else if (index === 0) {\n          return date.getHours() === $timepicker.$date.getHours();\n        } else if (index === 1) {\n          return date.getMinutes() === $timepicker.$date.getMinutes();\n        } else if (index === 2) {\n          return date.getSeconds() === $timepicker.$date.getSeconds();\n        }\n      };\n      $timepicker.$isDisabled = function(date, index) {\n        var selectedTime;\n        if (index === 0) {\n          selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n        } else if (index === 1) {\n          selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n        } else if (index === 2) {\n          selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n        }\n        return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n      };\n      scope.$arrowAction = function(value, index) {\n        if (options.arrowBehavior === 'picker') {\n          $timepicker.$setTimeByStep(value, index);\n        } else {\n          $timepicker.$moveIndex(value, index);\n        }\n      };\n      $timepicker.$setTimeByStep = function(value, index) {\n        var newDate = new Date($timepicker.$date || startDate);\n        var hours = newDate.getHours();\n        var minutes = newDate.getMinutes();\n        var seconds = newDate.getSeconds();\n        if (index === 0) {\n          newDate.setHours(hours - parseInt(options.hourStep, 10) * value);\n        } else if (index === 1) {\n          newDate.setMinutes(minutes - parseInt(options.minuteStep, 10) * value);\n        } else if (index === 2) {\n          newDate.setSeconds(seconds - parseInt(options.secondStep, 10) * value);\n        }\n        $timepicker.select(newDate, index, true);\n      };\n      $timepicker.$moveIndex = function(value, index) {\n        var targetDate;\n        if (index === 0) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour + value * options.length, viewDate.minute, viewDate.second);\n          angular.extend(viewDate, {\n            hour: targetDate.getHours()\n          });\n        } else if (index === 1) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + value * options.length * options.minuteStep, viewDate.second);\n          angular.extend(viewDate, {\n            minute: targetDate.getMinutes()\n          });\n        } else if (index === 2) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + value * options.length * options.secondStep);\n          angular.extend(viewDate, {\n            second: targetDate.getSeconds()\n          });\n        }\n        $timepicker.$build();\n      };\n      $timepicker.$onMouseDown = function(evt) {\n        if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n        evt.stopPropagation();\n        if (isTouch) {\n          var targetEl = angular.element(evt.target);\n          if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n            targetEl = targetEl.parent();\n          }\n          targetEl.triggerHandler('click');\n        }\n      };\n      $timepicker.$onKeyDown = function(evt) {\n        if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (evt.keyCode === 13) {\n          $timepicker.hide(true);\n          return;\n        }\n        var newDate = new Date($timepicker.$date);\n        var hours = newDate.getHours();\n        var hoursLength = formatDate(newDate, hoursFormat).length;\n        var minutes = newDate.getMinutes();\n        var minutesLength = formatDate(newDate, minutesFormat).length;\n        var seconds = newDate.getSeconds();\n        var secondsLength = formatDate(newDate, secondsFormat).length;\n        var sepLength = 1;\n        var lateralMove = /(37|39)/.test(evt.keyCode);\n        var count = 2 + showSeconds * 1 + showAM * 1;\n        if (lateralMove) {\n          if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1; else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n        }\n        var selectRange = [ 0, hoursLength ];\n        var incr = 0;\n        if (evt.keyCode === 38) incr = -1;\n        if (evt.keyCode === 40) incr = +1;\n        var isSeconds = selectedIndex === 2 && showSeconds;\n        var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n        if (selectedIndex === 0) {\n          newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n          hoursLength = formatDate(newDate, hoursFormat).length;\n          selectRange = [ 0, hoursLength ];\n        } else if (selectedIndex === 1) {\n          newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n          minutesLength = formatDate(newDate, minutesFormat).length;\n          selectRange = [ hoursLength + sepLength, minutesLength ];\n        } else if (isSeconds) {\n          newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n          secondsLength = formatDate(newDate, secondsFormat).length;\n          selectRange = [ hoursLength + sepLength + minutesLength + sepLength, secondsLength ];\n        } else if (isMeridian) {\n          if (!lateralMove) $timepicker.switchMeridian();\n          selectRange = [ hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2 ];\n        }\n        $timepicker.select(newDate, selectedIndex, true);\n        createSelection(selectRange[0], selectRange[1]);\n        parentScope.$digest();\n      };\n      function createSelection(start, length) {\n        var end = start + length;\n        if (element[0].createTextRange) {\n          var selRange = element[0].createTextRange();\n          selRange.collapse(true);\n          selRange.moveStart('character', start);\n          selRange.moveEnd('character', end);\n          selRange.select();\n        } else if (element[0].setSelectionRange) {\n          element[0].setSelectionRange(start, end);\n        } else if (angular.isUndefined(element[0].selectionStart)) {\n          element[0].selectionStart = start;\n          element[0].selectionEnd = end;\n        }\n      }\n      function focusElement() {\n        element[0].focus();\n      }\n      var _init = $timepicker.init;\n      $timepicker.init = function() {\n        if (isNative && options.useNative) {\n          element.prop('type', 'time');\n          element.css('-webkit-appearance', 'textfield');\n          return;\n        } else if (isTouch) {\n          element.prop('type', 'text');\n          element.attr('readonly', 'true');\n          element.on('click', focusElement);\n        }\n        _init();\n      };\n      var _destroy = $timepicker.destroy;\n      $timepicker.destroy = function() {\n        if (isNative && options.useNative) {\n          element.off('click', focusElement);\n        }\n        _destroy();\n      };\n      var _show = $timepicker.show;\n      $timepicker.show = function() {\n        if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n        _show();\n        $timeout(function() {\n          if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.on('keydown', $timepicker.$onKeyDown);\n          }\n        }, 0, false);\n      };\n      var _hide = $timepicker.hide;\n      $timepicker.hide = function(blur) {\n        if (!$timepicker.$isShown) return;\n        if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n        if (options.keyboard) {\n          if (element) element.off('keydown', $timepicker.$onKeyDown);\n        }\n        _hide(blur);\n      };\n      return $timepicker;\n    }\n    timepickerFactory.defaults = defaults;\n    return timepickerFactory;\n  } ];\n}).directive('bsTimepicker', [ '$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$timepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n  var defaults = $timepicker.defaults;\n  var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n  return {\n    restrict: 'EAC',\n    require: 'ngModel',\n    link: function postLink(scope, element, attr, controller) {\n      var options = {\n        scope: scope\n      };\n      angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate' ], function(key) {\n        if (angular.isDefined(attr[key])) options[key] = attr[key];\n      });\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach([ 'html', 'container', 'autoclose', 'useNative', 'roundDisplay' ], function(key) {\n        if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n          options[key] = false;\n        }\n      });\n      angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n        var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n        if (angular.isDefined(attr[bsKey])) {\n          options[key] = scope.$eval(attr[bsKey]);\n        }\n      });\n      if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n      var timepicker = $timepicker(element, controller, options);\n      options = timepicker.$options;\n      var lang = options.lang;\n      var formatDate = function(date, format, timezone) {\n        return $dateFormatter.formatDate(date, format, lang, timezone);\n      };\n      if (attr.bsShow) {\n        scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          if (newValue === true) {\n            timepicker.show();\n          } else {\n            timepicker.hide();\n          }\n        });\n      }\n      var dateParser = $dateParser({\n        format: options.timeFormat,\n        lang: lang\n      });\n      angular.forEach([ 'minTime', 'maxTime' ], function(key) {\n        if (angular.isDefined(attr[key])) {\n          attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            if (!isNaN(timepicker.$options[key])) timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        }\n      });\n      scope.$watch(attr.ngModel, function(newValue, oldValue) {\n        timepicker.update(controller.$dateValue);\n      }, true);\n      function validateAgainstMinMaxTime(parsedTime) {\n        if (!angular.isDate(parsedTime)) return;\n        var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n        var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n        var isValid = isMinValid && isMaxValid;\n        controller.$setValidity('date', isValid);\n        controller.$setValidity('min', isMinValid);\n        controller.$setValidity('max', isMaxValid);\n        if (!isValid) {\n          return;\n        }\n        controller.$dateValue = parsedTime;\n      }\n      controller.$parsers.unshift(function(viewValue) {\n        var date;\n        if (!viewValue) {\n          controller.$setValidity('date', true);\n          return null;\n        }\n        var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n        if (!parsedTime || isNaN(parsedTime.getTime())) {\n          controller.$setValidity('date', false);\n          return undefined;\n        }\n        validateAgainstMinMaxTime(parsedTime);\n        if (options.timeType === 'string') {\n          date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n          return formatDate(date, options.modelTimeFormat || options.timeFormat);\n        }\n        date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n        if (options.timeType === 'number') {\n          return date.getTime();\n        } else if (options.timeType === 'unix') {\n          return date.getTime() / 1e3;\n        } else if (options.timeType === 'iso') {\n          return date.toISOString();\n        }\n        return new Date(date);\n      });\n      controller.$formatters.push(function(modelValue) {\n        var date;\n        if (angular.isUndefined(modelValue) || modelValue === null) {\n          date = NaN;\n        } else if (angular.isDate(modelValue)) {\n          date = modelValue;\n        } else if (options.timeType === 'string') {\n          date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n        } else if (options.timeType === 'unix') {\n          date = new Date(modelValue * 1e3);\n        } else {\n          date = new Date(modelValue);\n        }\n        controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n        return getTimeFormattedString();\n      });\n      controller.$render = function() {\n        element.val(getTimeFormattedString());\n      };\n      function getTimeFormattedString() {\n        return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n      }\n      scope.$on('$destroy', function() {\n        if (timepicker) timepicker.destroy();\n        options = null;\n        timepicker = null;\n      });\n    }\n  };\n} ]);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', []).provider('$tab', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    template: 'tab/tab.tpl.html',\n    navClass: 'nav-tabs',\n    activeClass: 'active'\n  };\n  var controller = this.controller = function($scope, $element, $attrs) {\n    var self = this;\n    self.$options = angular.copy(defaults);\n    angular.forEach([ 'animation', 'navClass', 'activeClass' ], function(key) {\n      if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n    });\n    $scope.$navClass = self.$options.navClass;\n    $scope.$activeClass = self.$options.activeClass;\n    self.$panes = $scope.$panes = [];\n    self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n    self.$push = function(pane) {\n      if (angular.isUndefined(self.$panes.$active)) {\n        $scope.$setActive(pane.name || 0);\n      }\n      self.$panes.push(pane);\n    };\n    self.$remove = function(pane) {\n      var index = self.$panes.indexOf(pane);\n      var active = self.$panes.$active;\n      var activeIndex;\n      if (angular.isString(active)) {\n        activeIndex = self.$panes.map(function(pane) {\n          return pane.name;\n        }).indexOf(active);\n      } else {\n        activeIndex = self.$panes.$active;\n      }\n      self.$panes.splice(index, 1);\n      if (index < activeIndex) {\n        activeIndex--;\n      } else if (index === activeIndex && activeIndex === self.$panes.length) {\n        activeIndex--;\n      }\n      if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n        self.$setActive(self.$panes[activeIndex].name || activeIndex);\n      } else {\n        self.$setActive();\n      }\n    };\n    self.$setActive = $scope.$setActive = function(value) {\n      self.$panes.$active = value;\n      self.$activePaneChangeListeners.forEach(function(fn) {\n        fn();\n      });\n    };\n    self.$isActive = $scope.$isActive = function($pane, $index) {\n      return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n    };\n  };\n  this.$get = function() {\n    var $tab = {};\n    $tab.defaults = defaults;\n    $tab.controller = controller;\n    return $tab;\n  };\n}).directive('bsTabs', [ '$window', '$animate', '$tab', '$parse', function($window, $animate, $tab, $parse) {\n  var defaults = $tab.defaults;\n  return {\n    require: [ '?ngModel', 'bsTabs' ],\n    transclude: true,\n    scope: true,\n    controller: [ '$scope', '$element', '$attrs', $tab.controller ],\n    templateUrl: function(element, attr) {\n      return attr.template || defaults.template;\n    },\n    link: function postLink(scope, element, attrs, controllers) {\n      var ngModelCtrl = controllers[0];\n      var bsTabsCtrl = controllers[1];\n      if (ngModelCtrl) {\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n        });\n        ngModelCtrl.$formatters.push(function(modelValue) {\n          bsTabsCtrl.$setActive(modelValue);\n          return modelValue;\n        });\n      }\n      if (attrs.bsActivePane) {\n        var parsedBsActivePane = $parse(attrs.bsActivePane);\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n        });\n        scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n          bsTabsCtrl.$setActive(newValue);\n        }, true);\n      }\n    }\n  };\n} ]).directive('bsPane', [ '$window', '$animate', '$sce', function($window, $animate, $sce) {\n  return {\n    require: [ '^?ngModel', '^bsTabs' ],\n    scope: true,\n    link: function postLink(scope, element, attrs, controllers) {\n      var bsTabsCtrl = controllers[1];\n      element.addClass('tab-pane');\n      attrs.$observe('title', function(newValue, oldValue) {\n        scope.title = $sce.trustAsHtml(newValue);\n      });\n      scope.name = attrs.name;\n      scope.link = attrs.link ? attrs.link : false;\n      if (bsTabsCtrl.$options.animation) {\n        element.addClass(bsTabsCtrl.$options.animation);\n      }\n      attrs.$observe('disabled', function(newValue, oldValue) {\n        scope.disabled = scope.$eval(newValue);\n      });\n      bsTabsCtrl.$push(scope);\n      scope.$on('$destroy', function() {\n        bsTabsCtrl.$remove(scope);\n      });\n      function render() {\n        var index = bsTabsCtrl.$panes.indexOf(scope);\n        $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n      }\n      bsTabsCtrl.$activePaneChangeListeners.push(function() {\n        render();\n      });\n      render();\n    }\n  };\n} ]);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.sort', []).directive('bsSort', [function() {\n  return {\n    scope: true,\n    compile: function (element, attrs) {\n      var list = element[0].querySelectorAll('th');\n      for (var i = 0, len = list.length; i < len; i++) {\n        var item = list[i];\n        item = angular.element(item);\n        if (item.attr('data-sortable')) {\n          var dataName = item.attr('data-name');\n          item.append('<div class=\"sorter\"><i class=\"nox-sort-up sort-asc\" ng-class=\"{active: orderBy == \\'' + dataName + '\\' && sortBy == \\'asc\\'}\"></i><i class=\"nox-sort-down sort-desc\" ng-class=\"{active: orderBy == \\'' + dataName + '\\' && sortBy == \\'desc\\'}\"></i></div>');\n        }\n      }\n\n      return function postLink (scope, element, attrs) {\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach(['onSort'], function(key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attrs[bsKey])) {\n            options[key] = scope.$eval(attrs[bsKey]);\n          }\n        });\n        if (angular.isDefined(attrs.totalItems)) {\n          attrs.$observe('totalItems', function (newValue) {\n            options.totalItems = newValue;\n          });\n        }\n        // 初始化排序\n        angular.forEach([ 'orderBy', 'sortBy' ], function(key) {\n          if (angular.isDefined(attrs[key])) {\n            scope[key] = scope.$eval(attrs[key]);\n          }\n        });\n        var list = element[0].querySelectorAll('th');\n        for (var i = 0, len = list.length; i < len; i++) {\n          var item = list[i];\n          item = angular.element(item);\n          if (item.attr('data-sortable')) {\n            item.on('click', clickColumn);\n          }\n        }\n\n        function clickColumn (event) {\n          if (options.totalItems === -1) {\n            return;\n          }\n          var target = angular.element(event.currentTarget);\n          var dataName = target.attr('data-name');\n          if (dataName === scope.orderBy) {\n            scope.sortBy = scope.sortBy === 'asc' ? 'desc' : 'asc';\n          } else {\n            scope.orderBy = dataName;\n            scope.sortBy = 'desc';\n          }\n          scope.$apply();\n\n          if (angular.isDefined(options.onSort) && angular.isFunction(options.onSort)) {\n            options.onSort(scope.orderBy, scope.sortBy);\n          }\n        }\n      };\n    }\n  };\n}]);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"select-arrow\"><i class=\"nox-sort-down\"></i></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","/**\n * Created by xiashan on 17/5/12.\n */\n\n'use strict';\n\nangular.module('mgcrea.ngStrap.rangedatepicker', [ 'mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip' ])\n  .provider('$rangedatepicker', function () {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'rangedatepicker',\n      placement: 'bottom-left',\n      templateUrl: 'rangedatepicker/rangedatepicker.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      connector: ' / ',\n      dateType: 'date',\n      dateFormat: 'yyyy-MM-dd',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'nox-sort-left',\n      iconRight: 'nox-sort-right',\n      compare: true\n    };\n    this.$get = ['$window', '$document', '$rootScope', '$sce', '$dateFormatter', 'rangedatepickerViews', '$tooltip', '$timeout',\n      function ($window, $document, $rootScope, $sce, $dateFormatter, rangedatepickerViews, $tooltip, $timeout) {\n        var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n        var isTouch = 'createTouch' in $window.document && isNative;\n        if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n        function RangeDatepickerFactory (element, controller, config) {\n          var $rangedatepicker = $tooltip(element, angular.extend({}, defaults, config));\n          var options = $rangedatepicker.$options;\n          var scope = $rangedatepicker.$scope;\n          var pickerViews = rangedatepickerViews($rangedatepicker);\n          $rangedatepicker.$view = pickerViews.view;\n          var viewDate = pickerViews.viewDate;\n          scope.$iconLeft = options.iconLeft;\n          scope.$iconRight = options.iconRight;\n          scope.$compare = options.compare;\n          var $picker = $rangedatepicker.$view;\n\n          var today = new Date();\n          var t = $rangedatepicker.$today = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n          var d = today.getDay();\n\n          scope.rangeList = [\n            {name: 'Today', value: '0d', date: {start: t, end: t}},\n            {name: 'Yesterday', value: '-2d', date: {start: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 1), end: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 1)}},\n            {name: 'Last 7 Days', value: '-7d', date: {start: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 6), end: t}},\n            {name: 'Last Week', value: '-1w', date: {start: new Date(t.getFullYear(), t.getMonth(), t.getDate() - 6 - d), end: new Date(t.getFullYear(), t.getMonth(), t.getDate() - d)}},\n            {name: 'This Month', value: '0m', date: {start: new Date(t.getFullYear(), t.getMonth(), 1), end: t}},\n            {name: 'Last Month', value: '-1m', date: {start: new Date(t.getFullYear(), t.getMonth() - 1, 1), end: new Date(t.getFullYear(), t.getMonth(), 0)}}\n          ];\n\n          // 区间\n          scope.ctrl = {\n            rangeType: '',\n            compare: ''\n          };\n\n          scope.$select = function (date, index) {\n            // compare只支持选择开始时间\n            if (scope.ctrl.compare && index) {\n              return;\n            }\n            $rangedatepicker.select(date, index);\n          };\n          scope.$selectPane = function (value, index) {\n            // compare只支持选择开始时间\n            if (scope.ctrl.compare && index) {\n              return;\n            }\n            $rangedatepicker.$selectPane(value, index);\n          };\n          scope.$selectRange = function (type) {\n            if (type === scope.ctrl.rangeType || scope.ctrl.compare) {\n              return;\n            }\n            $rangedatepicker.$selectRange(type);\n            $rangedatepicker.hide(true);\n          };\n          scope.$toggleCompare = function () {\n            var modelValue = controller.$modelValue ? angular.copy(controller.$modelValue) : {};\n            modelValue.compare = scope.ctrl.compare;\n            // 只变更了勾选compare\n            modelValue.onlyCompare = true;\n            controller.$setViewValue(modelValue);\n            controller.$render();\n          };\n          scope.$closePicker = function () {\n            $rangedatepicker.hide();\n          };\n          scope.$stopPropagation = function (evt) {\n            evt.stopPropagation();\n          };\n\n          $rangedatepicker.update = function (sDate, eDate, force) {\n            if (angular.isDate(sDate) && !isNaN(sDate.getTime()) && angular.isDate(eDate) && !isNaN(eDate.getTime())) {\n              if (!scope.ctrl.compare) {\n                $rangedatepicker.$date = [sDate, eDate];\n              } else {\n                $rangedatepicker.$compareDate = [sDate, eDate];\n              }\n              $picker.update.call($picker, sDate, eDate);\n            } else {\n              $rangedatepicker.$build(!force);\n            }\n          };\n          $rangedatepicker.updateDisabledDates = function (dateRanges) {\n            options.disabledDateRanges = dateRanges;\n            for (var i = 0, l = scope.rows.length; i < l; i++) {\n              angular.forEach(scope.rows[i], $rangedatepicker.$setDisabledEl);\n            }\n          };\n          $rangedatepicker.select = function (date, index, keep) {\n            var modelValue = controller.$modelValue ? angular.copy(controller.$modelValue) : {};\n            modelValue.compare = scope.ctrl.compare;\n            if (!scope.ctrl.compare) {\n              if (angular.isDate(date)) {\n                if (!angular.isDate(controller.$dateValue[index]) || isNaN(controller.$dateValue[index].getTime())) {\n                  controller.$dateValue[index] = new Date(date);\n                }\n              } else {\n                controller.$dateValue[index] = null;\n              }\n              if (index === 0) {\n                modelValue.startDate = angular.copy(date);\n              } else {\n                modelValue.endDate = angular.copy(date);\n              }\n            } else {\n              controller.$compareDateValue = !controller.$compareDateValue ? [] : controller.$compareDateValue;\n              if (angular.isDate(date)) {\n                if (!angular.isDate(controller.$compareDateValue[index]) || isNaN(controller.$compareDateValue[index].getTime())) {\n                  controller.$compareDateValue[index] = new Date(date);\n                }\n              } else {\n                controller.$compareDateValue[index] = null;\n              }\n              if (index === 0) {\n                modelValue.compareStartDate = angular.copy(date);\n              } else {\n                modelValue.compareEndDate = angular.copy(date);\n              }\n            }\n            modelValue.onlyCompare = false;\n            controller.$setViewValue(modelValue);\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $rangedatepicker.hide(true);\n              });\n            }\n          };\n          $rangedatepicker.$getCompare = function () {\n            return scope.ctrl && scope.ctrl.compare;\n          };\n          $rangedatepicker.$setCompare = function () {\n            scope.ctrl && (scope.ctrl.compare = 'compare');\n          };\n          $rangedatepicker.$build = function (pristine) {\n            if (pristine === true && $picker.built) return;\n            if (pristine === false && !$picker.built) return;\n            $picker.build.call($picker, $rangedatepicker.$date);\n          };\n          $rangedatepicker.$updateSelected = function () {\n            for (var i = 0, l = scope.rows.length; i < l; i++) {\n              angular.forEach(scope.rows[i], updateSelected);\n            }\n          };\n          $rangedatepicker.$isSelected = function (date) {\n            return $picker.isSelected(date);\n          };\n          $rangedatepicker.$setDisabledEl = function (el) {\n            el.disabled = $picker.isDisabled(el.date);\n          };\n          $rangedatepicker.$selectPane = function (value, index) {\n            var steps = $picker.steps;\n            var key = (index === 0) ? 'startDate' : 'endDate';\n            var targetDate = new Date(Date.UTC(viewDate[key].year + (steps.year || 0) * value, viewDate[key].month + (steps.month || 0) * value, 1));\n            angular.extend(viewDate[key], {\n              year: targetDate.getUTCFullYear(),\n              month: targetDate.getUTCMonth(),\n              date: targetDate.getUTCDate()\n            });\n            $rangedatepicker.$build();\n          };\n          $rangedatepicker.$selectRange = function (type) {\n            var cate = type.substr(-1);\n            var value = parseInt(type.substr(0, type.length - 1), 10);\n            var endDate = $rangedatepicker.$today;\n            var startDate;\n            switch (cate) {\n              case 'd':\n                if (value < 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value + 1);\n                  if (value === -2) {\n                    endDate = startDate;\n                  }\n                } else {\n                  startDate = endDate;\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value);\n                }\n                break;\n              case 'w':\n                var day = endDate.getDay();\n                if (value <= 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value * 7 + (day * -1 + 1));\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + (day * -1));\n                } else {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + 7 - day + 1);\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() + value * 7 + (7 - day));\n                }\n                break;\n              case 'm':\n                if (value === 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth(), 1);\n                } else if (value < 0) {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth() + value, 1);\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth(), 0);\n                } else {\n                  startDate = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 1);\n                  endDate = new Date(endDate.getFullYear(), endDate.getMonth() + value + 1, 0);\n                }\n                break;\n              default:\n                break;\n            }\n            if (angular.isDate(startDate) && angular.isDate(endDate)) {\n              controller.$dateValue[0] = angular.copy(startDate);\n              controller.$dateValue[1] = angular.copy(endDate);\n              var modelValue = controller.$modelValue ? angular.copy(controller.$modelValue) : {};\n              modelValue.startDate = angular.copy(startDate);\n              modelValue.endDate = angular.copy(endDate);\n              modelValue.onlyCompare = false;\n              controller.$setViewValue(modelValue);\n              controller.$render();\n              scope.ctrl.rangeType = type;\n            }\n          };\n          $rangedatepicker.$onMouseDown = function (evt) {\n            evt.preventDefault(true);\n            evt.stopPropagation(true);\n            var targetEl = angular.element(evt.target);\n            if (isTouch) {\n              if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n                targetEl = targetEl.parent();\n              }\n              targetEl.triggerHandler('click');\n            }\n          };\n          function updateSelected (el) {\n            el.selected = $rangedatepicker.$isSelected(el.date);\n          }\n          function focusElement () {\n            element[0].focus();\n          }\n          var _init = $rangedatepicker.init;\n          $rangedatepicker.init = function () {\n            if (isNative && options.useNative) {\n              element.prop('type', 'date');\n              element.css('-webkit-appearance', 'textfield');\n              return;\n            } else if (isTouch) {\n              element.prop('type', 'text');\n              element.attr('readonly', 'true');\n              element.on('click', focusElement);\n            }\n            _init();\n          };\n          var _destroy = $rangedatepicker.destroy;\n          $rangedatepicker.destroy = function () {\n            if (isNative && options.useNative) {\n              element.off('click', focusElement);\n            }\n            _destroy();\n          };\n          var _show = $rangedatepicker.show;\n          $rangedatepicker.show = function () {\n            // if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n            if (element.attr('disabled')) return;\n            _show();\n            $timeout(function () {\n              if (!$rangedatepicker.$isShown) return;\n              $rangedatepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $rangedatepicker.$onMouseDown);\n            }, 0, false);\n          };\n          var _hide = $rangedatepicker.hide;\n          $rangedatepicker.hide = function (blur) {\n            if (!$rangedatepicker.$isShown) return;\n            $rangedatepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $rangedatepicker.$onMouseDown);\n            _hide(blur);\n          };\n          return $rangedatepicker;\n        }\n        RangeDatepickerFactory.defaults = defaults;\n        return RangeDatepickerFactory;\n      }];\n  })\n  .directive('bsRangedatepicker', ['$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$rangedatepicker',\n    function ($window, $parse, $q, $dateFormatter, $dateParser, $rangedatepicker) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n      return {\n        restrict: 'EAC',\n        require: 'ngModel',\n        link: function postLink (scope, element, attr, controller) {\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'connector', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'compare'], function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          });\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container', 'autoclose', 'useNative', 'compare'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n              options[key] = false;\n            }\n          });\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n          var rangedatepicker = $rangedatepicker(element, controller, options);\n          options = rangedatepicker.$options;\n          if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n          var lang = options.lang;\n          var formatDate = function (date, format) {\n            return $dateFormatter.formatDate(date, format, lang);\n          };\n          var dateParser = $dateParser({\n            format: options.dateFormat,\n            lang: lang,\n            strict: options.strictFormat\n          });\n          angular.forEach(['minDate', 'maxDate'], function (key) {\n            if (angular.isDefined(attr[key])) {\n              attr.$observe(key, function (newValue) {\n                rangedatepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n                if (!isNaN(rangedatepicker.$options[key])) {\n                  rangedatepicker.$build(false);\n                }\n                // if (controller.$dateValue) {\n                //   validateAgainstMinMaxDate(controller.$dateValue[0], controller.$dateValue[1]);\n                // }\n              });\n            }\n          });\n          if (angular.isDefined(attr.dateFormat)) {\n            attr.$observe('dateFormat', function (newValue) {\n              rangedatepicker.$options.dateFormat = newValue;\n            });\n          }\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            if (newValue && newValue.onlyCompare) {\n              rangedatepicker.update(null, null, true);\n            } else if (rangedatepicker.$getCompare()) {\n              rangedatepicker.$date = [controller.$dateValue[0], controller.$dateValue[1]];\n              rangedatepicker.update(controller.$compareDateValue[0], controller.$compareDateValue[1]);\n            } else {\n              rangedatepicker.update(controller.$dateValue[0], controller.$dateValue[1]);\n            }\n          }, true);\n\n          function getFormattedDate (modelValue) {\n            var date;\n            if (angular.isDate(modelValue)) {\n              date = modelValue;\n            } else if (options.dateType === 'string') {\n              date = dateParser.parse(modelValue, null, options.modelDateFormat);\n            } else if (options.dateType === 'unix') {\n              date = new Date(modelValue * 1e3);\n            } else {\n              date = new Date(modelValue);\n            }\n            return date;\n          }\n          function validateAgainstMinMaxDate (parsedDate1, parsedDate2) {\n            if (!angular.isDate(parsedDate1) || !angular.isDate(parsedDate2)) {\n              return false;\n            }\n            var isMinValid = isNaN(rangedatepicker.$options.minDate) || parsedDate1.getTime() >= rangedatepicker.$options.minDate;\n            var isMaxValid = isNaN(rangedatepicker.$options.maxDate) || parsedDate2.getTime() <= rangedatepicker.$options.maxDate;\n            var isValid = isMinValid && isMaxValid;\n            controller.$setValidity('date', isValid);\n            controller.$setValidity('min', isMinValid);\n            controller.$setValidity('max', isMaxValid);\n            var compare = rangedatepicker.$getCompare();\n            if (isValid) {\n              if (compare) {\n                controller.$compareDateValue[0] = parsedDate1;\n                controller.$compareDateValue[1] = parsedDate2;\n              } else {\n                controller.$dateValue[0] = parsedDate1;\n                controller.$dateValue[1] = parsedDate2;\n              }\n            }\n            return true;\n          }\n          controller.$parsers.unshift(function (viewValue) {\n            var compare = rangedatepicker.$getCompare();\n            if (!viewValue) {\n              controller.$setValidity('date', true);\n              return null;\n            }\n            if (viewValue.onlyCompare) {\n              viewValue.compare = compare;\n              return viewValue;\n            }\n            var parsedDate1;\n            var parsedDate2;\n            if (compare) {\n              parsedDate1 = dateParser.parse(viewValue.compareStartDate, controller.$compareDateValue[0]);\n              parsedDate2 = dateParser.parse(viewValue.compareEndDate, controller.$compareDateValue[1]);\n            } else {\n              parsedDate1 = dateParser.parse(viewValue.startDate, controller.$dateValue[0]);\n              parsedDate2 = dateParser.parse(viewValue.endDate, controller.$dateValue[1]);\n            }\n            if (parsedDate1 && !parsedDate2) {\n              parsedDate2 = angular.copy(parsedDate1);\n            }\n            if (!parsedDate1 && parsedDate2) {\n              parsedDate1 = angular.copy(parsedDate2);\n            }\n            if (!parsedDate1 || isNaN(parsedDate1.getTime()) || !parsedDate2 || isNaN(parsedDate2.getTime())) {\n              controller.$setValidity('date', false);\n              return false;\n            }\n            validateAgainstMinMaxDate(parsedDate1, parsedDate2);\n            var obj = {\n              dateRange: viewValue.dateRange,\n              compare: compare\n            };\n            var skey = '';\n            var ekey = '';\n            if (compare) {\n              // 原对比日期需要显示，因此这里还是要赋值\n              obj.startDate = viewValue.startDate;\n              obj.endDate = viewValue.endDate;\n              skey = 'compareStartDate';\n              ekey = 'compareEndDate';\n            } else {\n              obj.compareStartDate = viewValue.compareStartDate;\n              obj.compareEndDate = viewValue.compareEndDate;\n              skey = 'startDate';\n              ekey = 'endDate';\n            }\n            if (options.dateType === 'string') {\n              obj[skey] = formatDate(dateParser.timezoneOffsetAdjust(parsedDate1, options.timezone, true), options.modelDateFormat || options.dateFormat);\n              obj[ekey] = formatDate(dateParser.timezoneOffsetAdjust(parsedDate2, options.timezone, true), options.modelDateFormat || options.dateFormat);\n              return obj;\n            }\n            var date1;\n            var date2;\n            if (compare) {\n              date1 = dateParser.timezoneOffsetAdjust(controller.$compareDateValue[0], options.timezone, true);\n              date2 = dateParser.timezoneOffsetAdjust(controller.$compareDateValue[1], options.timezone, true);\n            } else {\n              date1 = dateParser.timezoneOffsetAdjust(controller.$dateValue[0], options.timezone, true);\n              date2 = dateParser.timezoneOffsetAdjust(controller.$dateValue[1], options.timezone, true);\n            }\n            if (options.dateType === 'number') {\n              obj[skey] = date1.getTime();\n              obj[ekey] = date2.getTime();\n            } else if (options.dateType === 'unix') {\n              obj[skey] = date1.getTime() / 1e3;\n              obj[ekey] = date2.getTime() / 1e3;\n            } else if (options.dateType === 'iso') {\n              obj[skey] = date1.toISOString();\n              obj[ekey] = date2.toISOString();\n            } else {\n              obj[skey] = new Date(date1);\n              obj[ekey] = new Date(date2);\n            }\n            return obj;\n          });\n          controller.$formatters.push(function (modelValue) {\n            if (angular.isUndefined(modelValue) || modelValue === null) {\n              return '';\n            }\n            if (modelValue.dateRange) {\n              controller.$dateRange = modelValue.dateRange;\n              controller.$dateValue = !controller.$dateValue ? [] : controller.$dateValue;\n              rangedatepicker.$selectRange(controller.$dateRange);\n            } else {\n              controller.$dateValue = [];\n              controller.$compareDateValue = [];\n              if (modelValue.startDate && modelValue.endDate) {\n                var startDate = getFormattedDate(modelValue.startDate);\n                var endDate = getFormattedDate(modelValue.endDate);\n                controller.$dateValue = [dateParser.timezoneOffsetAdjust(startDate, options.timezone), dateParser.timezoneOffsetAdjust(endDate, options.timezone)];\n              }\n              if (modelValue.compareStartDate && modelValue.compareEndDate) {\n                var compareStartDate = getFormattedDate(modelValue.compareStartDate);\n                var compareEndDate = getFormattedDate(modelValue.compareEndDate);\n                controller.$compareDateValue = [dateParser.timezoneOffsetAdjust(compareStartDate, options.timezone), dateParser.timezoneOffsetAdjust(compareEndDate, options.timezone)];\n                if (modelValue.compare) {\n                  rangedatepicker.$setCompare();\n                }\n              }\n            }\n            return getDateFormattedString();\n          });\n          controller.$render = function () {\n            element.val(getDateFormattedString());\n          };\n          function getDateFormattedString () {\n            if (!controller.$modelValue || !controller.$modelValue.startDate || isNaN(controller.$modelValue.startDate.getTime())) {\n              return '';\n            }\n            var html = formatDate(controller.$modelValue.startDate, options.dateFormat);\n            if (controller.$modelValue.compare && controller.$modelValue.compareStartDate && !isNaN(controller.$modelValue.compareStartDate.getTime())) {\n              html += ' vs ' + formatDate(controller.$modelValue.compareStartDate, options.dateFormat);\n            } else if (!controller.$modelValue.compare && controller.$modelValue.endDate && !isNaN(controller.$modelValue.endDate.getTime())) {\n              html += ' / ' + formatDate(controller.$modelValue.endDate, options.dateFormat);\n            }\n            return html;\n          }\n          scope.$on('$destroy', function () {\n            if (rangedatepicker) rangedatepicker.destroy();\n            options = null;\n            rangedatepicker = null;\n          });\n        }\n      };\n    }])\n  .provider('rangedatepickerViews', function () {\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n    function mod (n, m) {\n      return (n % m + m) % m;\n    }\n    this.$get = ['$dateFormatter', '$dateParser', '$sce', function ($dateFormatter, $dateParser, $sce) {\n      return function (picker) {\n        var scope = picker.$scope;\n        var options = picker.$options;\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = (picker.$date && picker.$date[0]) || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var endDate = (picker.$date && picker.$date[1]) || (options.endDate ? dateParser.getDateForAttribute('endDate', options.endDate) : new Date());\n        var viewDate = {\n          startDate: {\n            year: startDate.getFullYear(),\n            month: startDate.getMonth(),\n            date: startDate.getDate()\n          },\n          endDate: {\n            year: endDate.getFullYear(),\n            month: endDate.getMonth(),\n            date: endDate.getDate()\n          }\n        };\n        var view = {\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (sDate, eDate, force) {\n            viewDate.startDate = {\n              year: sDate.getFullYear(),\n              month: sDate.getMonth(),\n              date: sDate.getDate()\n            };\n            viewDate.endDate = {\n              year: eDate.getFullYear(),\n              month: eDate.getMonth(),\n              date: eDate.getDate()\n            };\n            picker.$build();\n          },\n          build: function () {\n            var that = this;\n            scope.title = [];\n            scope.rows = [];\n            ['startDate', 'endDate'].forEach(function (value, index) {\n              var item = viewDate[value];\n              var firstDayOfMonth = new Date(item.year, item.month, 1);\n              var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n              var firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 6e4);\n              var days = [];\n              var day;\n              for (var i = 0; i < 42; i++) {\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({\n                  date: day,\n                  isToday: day.toDateString() === today,\n                  label: formatDate(day, that.format),\n                  selected: picker.$date && picker.$date[index] && (!picker.$getCompare() || (picker.$getCompare() && !index)) && that.isSelected(picker.$date[index], day),\n                  inRange: that.isInRange(day),\n                  muted: day.getMonth() !== item.month,\n                  disabled: (index === 1 && scope.ctrl.compare) || that.isDisabled(day, index),\n                  compareSelect: index === 0 && scope.ctrl.compare && picker.$compareDate && picker.$compareDate[index] && that.isSelected(picker.$compareDate[index], day)\n                });\n              }\n              scope.title[index] = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.rows[index] = split(days, that.split);\n            });\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            // set range\n            if (!scope.ctrl.compare) {\n              var flag = false;\n              scope.rangeList.forEach(function (item) {\n                if (item.date.start.toDateString() === picker.$date[0].toDateString() && item.date.end.toDateString() === picker.$date[1].toDateString()) {\n                  scope.ctrl.rangeType = item.value;\n                  flag = true;\n                }\n              });\n              if (!flag) {\n                scope.ctrl.rangeType = '';\n              }\n            }\n            this.built = true;\n          },\n          isSelected: function (currentDate, date) {\n            return currentDate &&\n              date.getFullYear() === currentDate.getFullYear() &&\n              date.getMonth() === currentDate.getMonth() &&\n              date.getDate() === currentDate.getDate();\n          },\n          isInRange: function (date) {\n            if (!picker.$date || picker.$getCompare()) {\n              return false;\n            }\n            var minDate = picker.$date[0];\n            var maxDate = picker.$date[1];\n            if (!angular.isDate(minDate) || !angular.isDate(maxDate) || !angular.isDate(date)) {\n              return false;\n            }\n            return (date.getTime() >= minDate.getTime() && date.getTime() <= maxDate.getTime());\n          },\n          isDisabled: function (date, index) {\n            var time = date.getTime();\n            if (time < Date.parse(options.minDate) || time > Date.parse(options.maxDate)) {\n              return true;\n            }\n            // 开始时间不能选择大于结束时间的事件\n            if (!scope.ctrl.compare && picker.$date && ((index && time < picker.$date[index - 1]) || (time > picker.$date[index + 1]))) {\n              return true;\n            }\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) {\n              return true;\n            }\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n            return false;\n          }\n        };\n        return {\n          view: view,\n          viewDate: viewDate\n        };\n      };\n    } ];\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n// 1, 2, 3 ... 10\n// 1 ... 8, 9, 10\n// 1 ... 5, 6, 7 ... 10\nangular.module('mgcrea.ngStrap.pagination', [])\n  .provider('$pagination', function() {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      pageClass: 'pagination',\n      pagesLength: 5,\n      itemsPerPage: 20,\n      templateUrl: 'pagination/pagination.tpl.html'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      /**\n       * 计算页数\n       * @returns {number}\n       */\n      this.calculateTotalPages = function(itemsPerPage, totalItems) {\n        var totalPages = itemsPerPage < 1\n          ? 1\n          : Math.ceil(totalItems / itemsPerPage);\n        return Math.max(totalPages || 0, 1);\n      };\n\n      this.makePage = function (number, text, isActive) {\n        return {\n          number: number,\n          text: text,\n          active: isActive\n        };\n      };\n\n      /**\n       * 获取显示的页码列表\n       * @param currentPage 当前页码\n       * @param totalPages  总页码数\n       * @param pagesLength 总共显示多少页\n       * @returns {Array}\n       */\n      this.getPages = function (currentPage, totalPages, pagesLength) {\n        // 处理传入参数\n        currentPage = currentPage < 1\n          ? 1\n          : ((totalPages > 0 && currentPage > totalPages) ? totalPages : currentPage);\n\n        var pages = [];\n        var i;\n\n        if (totalPages <= pagesLength) {\n          for (i = 1; i <= totalPages; i++){\n            pages.push(this.makePage(i, i, i === currentPage));\n          }\n        }\n        else { // 总页数大于分页长度（此时分为三种情况：1.右边有...2.左边有...3.左右都有...）\n          // 计算中心偏移量\n          var offset = (pagesLength - 1) / 2;\n          if (currentPage <= offset) {\n            // 左边没有...\n            for (i = 1; i <= offset + 1; i++){\n              pages.push(this.makePage(i, i, i === currentPage));\n            }\n            pages.push(this.makePage(i + 1, '...', false));\n            pages.push(this.makePage(totalPages, totalPages, false));\n          }\n          else if (currentPage > totalPages - offset) {\n            pages.push(this.makePage(1, 1, false));\n            pages.push(this.makePage(totalPages - offset - 1, '...', false));\n            for(i = offset; i >= 0; i--){\n              var p = totalPages - i;\n              pages.push(this.makePage(p, p, p === currentPage));\n            }\n          }\n          else {\n            // 最后一种情况，两边都有...\n            pages.push(this.makePage(1, 1, false));\n            // 当前页面显示居中位置\n            var half = Math.ceil(offset / 2);\n            pages.push(this.makePage(currentPage - half - 1, '...', false));\n            for(i = half; i >= 1; i--){\n              pages.push(this.makePage(currentPage - i, currentPage - i, false));\n            }\n            pages.push(this.makePage(currentPage, currentPage, true));\n            for(i = 1; i <= half; i++){\n              pages.push(this.makePage(currentPage + i, currentPage + i, false));\n            }\n            pages.push(this.makePage(currentPage + half + 1, '...', false));\n            pages.push(this.makePage(totalPages, totalPages, false));\n          }\n        }\n        return pages;\n      };\n    };\n    this.$get = function() {\n      var $pagination = {};\n      $pagination.defaults = defaults;\n      $pagination.controller = controller;\n      return $pagination;\n    };\n  })\n  .directive('bsPagination', [ '$window', '$sce', '$parse', '$pagination', function($window, $sce, $parse, $pagination) {\n    var defaults = $pagination.defaults;\n    return {\n      restrict: 'E',\n      require: [ '?ngModel', 'bsPagination' ],\n      scope: true,\n      replace: true,\n      controller: ['$scope', '$element', '$attrs', $pagination.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.templateUrl;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n        var ngModelCtrl = controllers[0];\n        var bsPaginationCtrl = controllers[1];\n\n        if (!ngModelCtrl) {\n          return;\n        }\n\n        var options = angular.copy(defaults);\n\n        // 这里的参数不需要动态改变\n        angular.forEach(['pageClass', 'pagesLength', 'itemsPerPage'], function (key) {\n          if (angular.isDefined(attrs[key])) {\n            options[key] = scope.$eval(attrs[key]);\n          }\n        });\n        angular.forEach(['onChange'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attrs[bsKey])) {\n            options[key] = scope.$eval(attrs[bsKey]);\n          }\n        });\n        // totalItems需要动态改变，显示loading，no result等\n        if (attrs['totalItems']) {\n          attrs.$observe('totalItems', function (newValue, oldValue) {\n            scope.totalItems = newValue;\n            scope.totalPages = bsPaginationCtrl.calculateTotalPages(options.itemsPerPage, scope.totalItems);\n            ngModelCtrl.$render();\n          });\n        }\n\n        scope.$pageClass = options.pageClass;\n        // pageLength需要是奇数\n        if (options.pagesLength % 2 === 0) {\n          options.pagesLength = options.pagesLength + 1;\n        }\n\n        /**\n         * 将model的值赋给page变量\n         */\n        ngModelCtrl.$render = function () {\n          scope.page = (scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1) > scope.totalPages ? scope.totalPages : scope.page;\n          if (scope.page > 0 && scope.page <= scope.totalPages) {\n            scope.pages = bsPaginationCtrl.getPages(scope.page, scope.totalPages, options.pagesLength);\n          }\n        };\n\n        /**\n         * 切换页码\n         * @param page\n         * @param evt\n         */\n        scope.selectPage = function (page, evt) {\n          if (evt) {\n            evt.preventDefault();\n          }\n          if (scope.page !== page && page > 0 && page <= scope.totalPages) {\n            if (evt && evt.target) {\n              evt.target.blur();\n            }\n            // 重新分页\n            ngModelCtrl.$setViewValue(page);\n            ngModelCtrl.$render();\n\n            if (angular.isDefined(options.onChange) && angular.isFunction(options.onChange)) {\n              // 通过observe建立双向绑定\n              options.onChange();\n            }\n          }\n        };\n\n        scope.noPrevious = function () {\n          return scope.page === 1;\n        };\n\n        scope.noNext = function () {\n          return scope.page === scope.totalPages;\n        };\n\n        scope.selectPrevious = function (evt) {\n          scope.selectPage(scope.page - 1, evt);\n        };\n\n        scope.selectNext = function (evt) {\n          scope.selectPage(scope.page + 1, evt);\n        };\n      }\n    };\n  }]);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', [ 'mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions' ])\n  .provider('$modal', function() {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n    this.$get = [ '$window', '$rootScope', '$bsCompiler', '$animate', '$timeout', '$sce', 'dimensions', function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n      var validSizes = {\n        lg: 'modal-dialog-lg',\n        sm: 'modal-dialog-sm'\n      };\n      function ModalFactory(config) {\n        var $modal = {};\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n        forEach([ 'title', 'content' ], function(key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        $modal.$isShown = scope.$isShown = false;\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        promise.then(function(data) {\n          compileData = data;\n          $modal.init();\n        });\n        $modal.init = function() {\n          if (options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n        };\n        $modal.destroy = function() {\n          destroyModalElement();\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n          scope.$destroy();\n        };\n        $modal.show = function() {\n          if ($modal.$isShown) return;\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          }\n          else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n          if (options.backdrop) {\n            setScrollBar();\n          }\n          if (modalElement) {\n            destroyModalElement();\n          }\n          modalScope = $modal.$scope.$new();\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\n          if (options.backdrop) {\n            modalElement.css({\n              'z-index': dialogBaseZindex + backdropCount * 20\n            });\n            backdropElement.css({\n              'z-index': backdropBaseZindex + backdropCount * 20\n            });\n            backdropCount++;\n          }\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n          modalElement.css({\n            display: 'block'\n          }).addClass(options.placement);\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n        $modal.hide = function() {\n          if (!$modal.$isShown) return;\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n          if (options.backdrop) {\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n        function leaveAnimateCallback() {\n          if (options.backdrop) {\n            resetScrollBar();\n          }\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n        $modal.toggle = function() {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n        $modal.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n        function bindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n        function unbindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n        function bindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n        function unbindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n        function hideOnBackdropClick(evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n        function destroyModalElement() {\n          if ($modal.$isShown && modalElement !== null) {\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n        function setScrollBar() {\n          var scrollDiv = document.createElement('div');\n          scrollDiv.className = 'modal-scrollbar-measure';\n          bodyElement.append(scrollDiv);\n          var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n          bodyElement[0].removeChild(scrollDiv);\n\n          var fullWindowWidth = window.innerWidth;\n          if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n            var documentElementRect = document.documentElement.getBoundingClientRect();\n            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n          }\n          var bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n\n          if (bodyIsOverflowing) bodyElement.css('padding-right', scrollbarWidth + 'px');\n        }\n        function resetScrollBar() {\n          bodyElement.css('padding-right', 0);\n        }\n        return $modal;\n      }\n      function safeDigest(scope) {\n        scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();\n      }\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n      return ModalFactory;\n    } ];\n  }).directive('bsModal', [ '$window', '$sce', '$parse', '$modal', function($window, $sce, $parse, $modal) {\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex' ], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach([ 'backdrop', 'keyboard', 'html', 'container' ], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n        angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n        angular.forEach([ 'title', 'content' ], function(key) {\n          if (attr[key]) {\n            attr.$observe(key, function(newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function(newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n        var modal = $modal(options);\n        element.on(attr.trigger || 'click', modal.toggle);\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n      }\n    };\n  } ]);\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","/**\n * Created by xiashan on 17/12/8.\n */\n'use strict';\n\nangular.module('mgcrea.ngStrap.datetimepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n  .provider('datetimepickerViews', function () {\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n    function mod (n, m) {\n      return (n % m + m) % m;\n    }\n    this.$get = ['$dateFormatter', '$dateParser', '$sce', function ($dateFormatter, $dateParser, $sce) {\n      function DatetimepickerViewsFactory (picker) {\n        var scope = picker.$scope;\n        var options = picker.$options;\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var format = $dateFormatter.getDatetimeFormat(options.dateFormat, lang);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate(),\n          hour: startDate.getHours(),\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n        var views = [\n          {\n            hourFormat: options.hourFormat,\n            minuteFormat: options.minuteFormat,\n            secondFormat: options.secondFormat,\n            split: 7,\n            steps: {\n              date: 1\n            },\n            update: function (date, force) {\n              if (angular.isDate(date) && !isNaN(date.getTime())) {\n                // picker.$date === date\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate(),\n                  hour: picker.$date.getHours(),\n                  minute: picker.$date.getMinutes(),\n                  second: picker.$date.getSeconds(),\n                  millisecond: picker.$date.getMilliseconds()\n                });\n                picker.$build();\n              } else if (!this.built || force) {\n                picker.$build();\n              }\n            },\n            build: function () {\n              var i;\n              var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n              var hours = [];\n              var hour;\n              var step;\n              for (i = 0; i < options.length; i++) {\n                // hour = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour - (midIndex - i) * options.hourStep);\n                step = viewDate.hour - (midIndex - i) * options.hourStep;\n                step = step < 0 ? (24 + step) : step;\n                hour = new Date(viewDate.year, viewDate.month, viewDate.date, step, viewDate.minute, viewDate.second);\n                hours.push({\n                  date: hour,\n                  label: formatDate(hour, this.hourFormat),\n                  selected: picker.$date && this.isSelected(hour, 0),\n                  disabled: this.isDisabled(hour, 0)\n                  // selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n                  // disabled: $timepicker.$isDisabled(hour, 0)\n                });\n              }\n              var minutes = [];\n              var minute;\n              for (i = 0; i < options.length; i++) {\n                // minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n                step = viewDate.minute - (midIndex - i) * options.minuteStep;\n                step = step < 0 ? (60 + step) : step;\n                minute = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, step, viewDate.second);\n                minutes.push({\n                  date: minute,\n                  label: formatDate(minute, this.minuteFormat),\n                  selected: picker.$date && this.isSelected(minute, 1),\n                  disabled: this.isDisabled(minute, 1)\n                });\n              }\n              var seconds = [];\n              var second;\n              for (i = 0; i < options.length; i++) {\n                // second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n                step = viewDate.second - (midIndex - i) * options.secondStep;\n                step = step < 0 ? (60 + step) : step;\n                second = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, viewDate.minute, step);\n                seconds.push({\n                  date: second,\n                  label: formatDate(second, this.secondFormat),\n                  selected: picker.$date && this.isSelected(second, 2),\n                  disabled: this.isDisabled(second, 2)\n                });\n              }\n              var rows = [];\n              for (i = 0; i < options.length; i++) {\n                if (showSeconds) {\n                  rows.push([hours[i], minutes[i], seconds[i]]);\n                } else {\n                  rows.push([hours[i], minutes[i]]);\n                }\n              }\n              scope.title = formatDate(new Date(viewDate.year, viewDate.month, viewDate.date), options.timeTitleFormat);\n              scope.rows = rows;\n              scope.showSeconds = showSeconds;\n              scope.timeSeparator = timeSeparator;\n              this.built = true;\n            },\n            isSelected: function (date, index) {\n              if (!picker.$date) {\n                return false;\n              } else if (index === 0) {\n                return date.getHours() === picker.$date.getHours();\n              } else if (index === 1) {\n                return date.getMinutes() === picker.$date.getMinutes();\n              } else if (index === 2) {\n                return date.getSeconds() === picker.$date.getSeconds();\n              }\n              return false;\n            },\n            isDisabled: function (date, index) {\n              var time = date.getTime();\n              return options.minDate && angular.isDate(options.minDate) && time < options.minDate.getTime() ||\n                (options.maxDate && angular.isDate(options.maxDate) && time > options.maxDate.getTime());\n            },\n            onKeyDown: function (evt) {\n              if (!picker.$date) {\n                return;\n              }\n            }\n          },\n          {\n            format: options.dayFormat,\n            split: 7,\n            steps: {\n              month: 1\n            },\n            update: function (date, force) {\n              if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$build();\n              } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function () {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n              var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n              var firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 6e4);\n              var days = [];\n              var day;\n              for (var i = 0; i < 42; i++) {\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({\n                  date: day,\n                  isToday: day.toDateString() === today,\n                  label: formatDate(day, this.format),\n                  selected: picker.$date && this.isSelected(day),\n                  muted: day.getMonth() !== viewDate.month,\n                  disabled: this.isDisabled(day)\n                });\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              scope.isTodayDisabled = this.isDisabled(new Date());\n              this.built = true;\n            },\n            isSelected: function (date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function (date) {\n              var time = date.getTime();\n              if (options.minDate && angular.isDate(options.minDate)) {\n                var minDate = new Date(options.minDate.getFullYear(), options.minDate.getMonth(), options.minDate.getDate(), 0, 0, 0);\n                if (time < Date.parse(minDate)) {\n                  return true;\n                }\n              }\n              if (options.maxDate && angular.isDate(options.maxDate)) {\n                var maxDate = new Date(options.maxDate.getFullYear(), options.maxDate.getMonth(), options.maxDate.getDate() + 1, 0, 0, 0);\n                if (time >= Date.parse(maxDate)) {\n                  return true;\n                }\n              }\n              // if (time < Date.parse(options.minDate) || time > Date.parse(options.maxDate)) return true;\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n              return false;\n            },\n            onKeyDown: function (evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n              if (evt.keyCode === 37) {\n                newDate = new Date(actualTime - 1 * 864e5);\n              } else if (evt.keyCode === 38) {\n                newDate = new Date(actualTime - 7 * 864e5);\n              } else if (evt.keyCode === 39) {\n                newDate = new Date(actualTime + 1 * 864e5);\n              } else if (evt.keyCode === 40) {\n                newDate = new Date(actualTime + 7 * 864e5);\n              }\n              if (!this.isDisabled(newDate)) {\n                picker.select(newDate, true);\n              }\n            }\n          },\n          {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: {\n              year: 1\n            },\n            update: function (date, force) {\n              if (!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$build();\n              } else if (date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$updateSelected();\n              }\n            },\n            build: function () {\n              var months = [];\n              var month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({\n                  date: month,\n                  label: formatDate(month, this.format),\n                  selected: picker.$isSelected(month),\n                  disabled: this.isDisabled(month)\n                });\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n              if (evt.keyCode === 37) {\n                newDate.setMonth(actualMonth - 1);\n              } else if (evt.keyCode === 38) {\n                newDate.setMonth(actualMonth - 4);\n              } else if (evt.keyCode === 39) {\n                newDate.setMonth(actualMonth + 1);\n              } else if (evt.keyCode === 40) {\n                newDate.setMonth(actualMonth + 4);\n              }\n              if (!this.isDisabled(newDate)) {\n                picker.select(newDate, true);\n              }\n            }\n          },\n          {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: {\n              year: 12\n            },\n            update: function (date, force) {\n              if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$build();\n              } else if (date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {\n                  year: picker.$date.getFullYear(),\n                  month: picker.$date.getMonth(),\n                  date: picker.$date.getDate()\n                });\n                picker.$updateSelected();\n              }\n            },\n            build: function () {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [];\n              var year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({\n                  date: year,\n                  label: formatDate(year, this.format),\n                  selected: picker.$isSelected(year),\n                  disabled: this.isDisabled(year)\n                });\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function (date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function (date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function (evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear();\n              var newDate = new Date(picker.$date);\n              if (evt.keyCode === 37) {\n                newDate.setYear(actualYear - 1);\n              } else if (evt.keyCode === 38) {\n                newDate.setYear(actualYear - 4);\n              } else if (evt.keyCode === 39) {\n                newDate.setYear(actualYear + 1);\n              } else if (evt.keyCode === 40) {\n                newDate.setYear(actualYear + 4);\n              }\n              if (!this.isDisabled(newDate)) {\n                picker.select(newDate, true);\n              }\n            }\n          }];\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n      }\n      return DatetimepickerViewsFactory;\n    }];\n  })\n  .provider('$datetimepicker', function() {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datetimepicker/datetimepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      hourFormat: 'HH',\n      minuteFormat: 'mm',\n      secondFormat: 'ss',\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      timeTitleFormat: 'dd MMM',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 1,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'nox-sort-up',\n      iconDown: 'nox-sort-down',\n      iconLeft: 'nox-sort-left',\n      iconRight: 'nox-sort-right',\n      arrowBehavior: 'pager'\n    };\n    this.$get = ['$window', '$document', '$rootScope', '$sce', '$dateFormatter', 'datetimepickerViews', '$tooltip', '$timeout', function ($window, $document, $rootScope, $sce, $dateFormatter, datetimepickerViews, $tooltip, $timeout) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n      var isTouch = 'createTouch' in $window.document && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n      function DatetimepickerFactory (element, controller, config) {\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n        var pickerViews = datetimepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$selectTime = function(date, index) {\n          $datepicker.selectTime(date, index);\n        };\n        scope.$arrowAction = function(value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $datepicker.$setTimeByStep(value, index);\n          } else {\n            $datepicker.$moveIndex(value, index);\n          }\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function() {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function() {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        $datepicker.update = function(date) {\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          $datepicker.$build(true);\n        };\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n        $datepicker.select = function(date, keep) {\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function() {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate(),\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n        $datepicker.selectTime = function(date, index, keep) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = new Date();\n          }\n          if (!angular.isDate(date)) {\n            date = new Date(date);\n          }\n          controller.$dateValue.setFullYear(date.getFullYear());\n          controller.$dateValue.setMonth(date.getMonth());\n          controller.$dateValue.setDate(date.getDate());\n          if (index === 0) {\n            controller.$dateValue.setHours(date.getHours());\n          } else if (index === 1) {\n            controller.$dateValue.setMinutes(date.getMinutes());\n          } else if (index === 2) {\n            controller.$dateValue.setSeconds(date.getSeconds());\n          }\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              // $datepicker.setMode(options.startView);\n              $datepicker.hide(true);\n            });\n          }\n        };\n        $datepicker.setMode = function(mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n        $datepicker.$build = function(pristine) {\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n        $datepicker.$updateSelected = function() {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          var targetDate = new Date(Date.UTC(\n            viewDate.year + (steps.year || 0) * value,\n            viewDate.month + (steps.month || 0) * value,\n            steps.date ? (viewDate.date + steps.date * value) : 1\n          ));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n        $datepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($datepicker.$date);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - parseInt(options.hourStep, 10) * value);\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - parseInt(options.minuteStep, 10) * value);\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - parseInt(options.secondStep, 10) * value);\n          }\n          $datepicker.selectTime(newDate, index, true);\n        };\n        $datepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour + value * options.length, viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, viewDate.minute + value * options.length * options.minuteStep, viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(viewDate.year, viewDate.month, viewDate.date, viewDate.hour, viewDate.minute, viewDate.second + value * options.length * options.secondStep);\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $datepicker.$build();\n        };\n        $datepicker.$onMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function() {\n                $datepicker.setMode(scope.$mode - 1);\n              });\n            }\n            return;\n          }\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n        function focusElement() {\n          element[0].focus();\n        }\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n          _show();\n          $timeout(function() {\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n        return $datepicker;\n      }\n      DatetimepickerFactory.defaults = defaults;\n      return DatetimepickerFactory;\n    }];\n  })\n  .directive('bsDatetimepicker', [ '$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$datetimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datetimepicker) {\n    var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n        var options = {\n          scope: scope\n        };\n        angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear' ], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach([ 'html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear' ], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n        angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n        var datepicker = $datetimepicker(element, controller, options);\n        options = datepicker.$options;\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function(newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n        angular.forEach([ 'minDate', 'maxDate' ], function(key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function(newValue) {\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function(newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n        controller.$parsers.unshift(function(viewValue) {\n          var date;\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1e3;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n        controller.$formatters.push(function(modelValue) {\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1e3);\n          } else {\n            date = new Date(modelValue);\n          }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n        controller.$render = function() {\n          element.val(getDateFormattedString());\n        };\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n        scope.$on('$destroy', function() {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n      }\n    };\n  }]);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [ 'mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip' ]).provider('$datepicker', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    prefixClass: 'datepicker',\n    placement: 'bottom-left',\n    templateUrl: 'datepicker/datepicker.tpl.html',\n    trigger: 'focus',\n    container: false,\n    keyboard: true,\n    html: false,\n    delay: 0,\n    useNative: false,\n    dateType: 'date',\n    dateFormat: 'shortDate',\n    timezone: null,\n    modelDateFormat: null,\n    dayFormat: 'dd',\n    monthFormat: 'MMM',\n    yearFormat: 'yyyy',\n    monthTitleFormat: 'MMMM yyyy',\n    yearTitleFormat: 'yyyy',\n    strictFormat: false,\n    autoclose: false,\n    minDate: -Infinity,\n    maxDate: +Infinity,\n    startView: 0,\n    minView: 0,\n    startWeek: 0,\n    daysOfWeekDisabled: '',\n    hasToday: false,\n    hasClear: false,\n    iconLeft: 'nox-sort-left',\n    iconRight: 'nox-sort-right'\n  };\n  this.$get = [ '$window', '$document', '$rootScope', '$sce', '$dateFormatter', 'datepickerViews', '$tooltip', '$timeout', function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n    var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n    var isTouch = 'createTouch' in $window.document && isNative;\n    if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n    function DatepickerFactory(element, controller, config) {\n      var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n      var parentScope = config.scope;\n      var options = $datepicker.$options;\n      var scope = $datepicker.$scope;\n      if (options.startView) options.startView -= options.minView;\n      var pickerViews = datepickerViews($datepicker);\n      $datepicker.$views = pickerViews.views;\n      var viewDate = pickerViews.viewDate;\n      scope.$mode = options.startView;\n      scope.$iconLeft = options.iconLeft;\n      scope.$iconRight = options.iconRight;\n      scope.$hasToday = options.hasToday;\n      scope.$hasClear = options.hasClear;\n      var $picker = $datepicker.$views[scope.$mode];\n      scope.$select = function(date) {\n        $datepicker.select(date);\n      };\n      scope.$selectPane = function(value) {\n        $datepicker.$selectPane(value);\n      };\n      scope.$toggleMode = function() {\n        $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n      };\n      scope.$setToday = function() {\n        if (options.autoclose) {\n          $datepicker.setMode(0);\n          $datepicker.select(new Date());\n        } else {\n          $datepicker.select(new Date(), true);\n        }\n      };\n      scope.$clear = function() {\n        if (options.autoclose) {\n          $datepicker.setMode(0);\n          $datepicker.select(null);\n        } else {\n          $datepicker.select(null, true);\n        }\n      };\n      $datepicker.update = function(date) {\n        if (angular.isDate(date) && !isNaN(date.getTime())) {\n          $datepicker.$date = date;\n          $picker.update.call($picker, date);\n        }\n        $datepicker.$build(true);\n      };\n      $datepicker.updateDisabledDates = function(dateRanges) {\n        options.disabledDateRanges = dateRanges;\n        for (var i = 0, l = scope.rows.length; i < l; i++) {\n          angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n        }\n      };\n      $datepicker.select = function(date, keep) {\n        if (angular.isDate(date)) {\n          if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = new Date(date);\n          }\n        } else {\n          controller.$dateValue = null;\n        }\n        if (!scope.$mode || keep) {\n          controller.$setViewValue(angular.copy(date));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              $datepicker.hide(true);\n            });\n          }\n        } else {\n          angular.extend(viewDate, {\n            year: date.getFullYear(),\n            month: date.getMonth(),\n            date: date.getDate()\n          });\n          $datepicker.setMode(scope.$mode - 1);\n          $datepicker.$build();\n        }\n      };\n      $datepicker.setMode = function(mode) {\n        scope.$mode = mode;\n        $picker = $datepicker.$views[scope.$mode];\n        $datepicker.$build();\n      };\n      $datepicker.$build = function(pristine) {\n        if (pristine === true && $picker.built) return;\n        if (pristine === false && !$picker.built) return;\n        $picker.build.call($picker);\n      };\n      $datepicker.$updateSelected = function() {\n        for (var i = 0, l = scope.rows.length; i < l; i++) {\n          angular.forEach(scope.rows[i], updateSelected);\n        }\n      };\n      $datepicker.$isSelected = function(date) {\n        return $picker.isSelected(date);\n      };\n      $datepicker.$setDisabledEl = function(el) {\n        el.disabled = $picker.isDisabled(el.date);\n      };\n      $datepicker.$selectPane = function(value) {\n        var steps = $picker.steps;\n        var targetDate = new Date(Date.UTC(viewDate.year + (steps.year || 0) * value, viewDate.month + (steps.month || 0) * value, 1));\n        angular.extend(viewDate, {\n          year: targetDate.getUTCFullYear(),\n          month: targetDate.getUTCMonth(),\n          date: targetDate.getUTCDate()\n        });\n        $datepicker.$build();\n      };\n      $datepicker.$onMouseDown = function(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (isTouch) {\n          var targetEl = angular.element(evt.target);\n          if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n            targetEl = targetEl.parent();\n          }\n          targetEl.triggerHandler('click');\n        }\n      };\n      $datepicker.$onKeyDown = function(evt) {\n        if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (evt.keyCode === 13) {\n          if (!scope.$mode) {\n            $datepicker.hide(true);\n          } else {\n            scope.$apply(function() {\n              $datepicker.setMode(scope.$mode - 1);\n            });\n          }\n          return;\n        }\n        $picker.onKeyDown(evt);\n        parentScope.$digest();\n      };\n      function updateSelected(el) {\n        el.selected = $datepicker.$isSelected(el.date);\n      }\n      function focusElement() {\n        element[0].focus();\n      }\n      var _init = $datepicker.init;\n      $datepicker.init = function() {\n        if (isNative && options.useNative) {\n          element.prop('type', 'date');\n          element.css('-webkit-appearance', 'textfield');\n          return;\n        } else if (isTouch) {\n          element.prop('type', 'text');\n          element.attr('readonly', 'true');\n          element.on('click', focusElement);\n        }\n        _init();\n      };\n      var _destroy = $datepicker.destroy;\n      $datepicker.destroy = function() {\n        if (isNative && options.useNative) {\n          element.off('click', focusElement);\n        }\n        _destroy();\n      };\n      var _show = $datepicker.show;\n      $datepicker.show = function() {\n        if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n        _show();\n        $timeout(function() {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.on('keydown', $datepicker.$onKeyDown);\n          }\n        }, 0, false);\n      };\n      var _hide = $datepicker.hide;\n      $datepicker.hide = function(blur) {\n        if (!$datepicker.$isShown) return;\n        $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n        if (options.keyboard) {\n          element.off('keydown', $datepicker.$onKeyDown);\n        }\n        _hide(blur);\n      };\n      return $datepicker;\n    }\n    DatepickerFactory.defaults = defaults;\n    return DatepickerFactory;\n  } ];\n}).directive('bsDatepicker', [ '$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$datepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n  var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n  return {\n    restrict: 'EAC',\n    require: 'ngModel',\n    link: function postLink(scope, element, attr, controller) {\n      var options = {\n        scope: scope\n      };\n      angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear' ], function(key) {\n        if (angular.isDefined(attr[key])) options[key] = attr[key];\n      });\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach([ 'html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear' ], function(key) {\n        if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n          options[key] = false;\n        }\n      });\n      angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n        var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n        if (angular.isDefined(attr[bsKey])) {\n          options[key] = scope.$eval(attr[bsKey]);\n        }\n      });\n      var datepicker = $datepicker(element, controller, options);\n      options = datepicker.$options;\n      if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n      var lang = options.lang;\n      var formatDate = function(date, format) {\n        return $dateFormatter.formatDate(date, format, lang);\n      };\n      var dateParser = $dateParser({\n        format: options.dateFormat,\n        lang: lang,\n        strict: options.strictFormat\n      });\n      if (attr.bsShow) {\n        scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!datepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          if (newValue === true) {\n            datepicker.show();\n          } else {\n            datepicker.hide();\n          }\n        });\n      }\n      angular.forEach([ 'minDate', 'maxDate' ], function(key) {\n        if (angular.isDefined(attr[key])) {\n          attr.$observe(key, function(newValue) {\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        }\n      });\n      if (angular.isDefined(attr.dateFormat)) {\n        attr.$observe('dateFormat', function(newValue) {\n          datepicker.$options.dateFormat = newValue;\n        });\n      }\n      scope.$watch(attr.ngModel, function(newValue, oldValue) {\n        datepicker.update(controller.$dateValue);\n      }, true);\n      function normalizeDateRanges(ranges) {\n        if (!ranges || !ranges.length) return null;\n        return ranges;\n      }\n      if (angular.isDefined(attr.disabledDates)) {\n        scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n          disabledRanges = normalizeDateRanges(disabledRanges);\n          previousValue = normalizeDateRanges(previousValue);\n          if (disabledRanges) {\n            datepicker.updateDisabledDates(disabledRanges);\n          }\n        });\n      }\n      function validateAgainstMinMaxDate(parsedDate) {\n        if (!angular.isDate(parsedDate)) return;\n        var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n        var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n        var isValid = isMinValid && isMaxValid;\n        controller.$setValidity('date', isValid);\n        controller.$setValidity('min', isMinValid);\n        controller.$setValidity('max', isMaxValid);\n        if (isValid) controller.$dateValue = parsedDate;\n      }\n      controller.$parsers.unshift(function(viewValue) {\n        var date;\n        if (!viewValue) {\n          controller.$setValidity('date', true);\n          return null;\n        }\n        var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n        if (!parsedDate || isNaN(parsedDate.getTime())) {\n          controller.$setValidity('date', false);\n          return;\n        }\n        validateAgainstMinMaxDate(parsedDate);\n        if (options.dateType === 'string') {\n          date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n          return formatDate(date, options.modelDateFormat || options.dateFormat);\n        }\n        date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n        if (options.dateType === 'number') {\n          return date.getTime();\n        } else if (options.dateType === 'unix') {\n          return date.getTime() / 1e3;\n        } else if (options.dateType === 'iso') {\n          return date.toISOString();\n        }\n        return new Date(date);\n      });\n      controller.$formatters.push(function(modelValue) {\n        var date;\n        if (angular.isUndefined(modelValue) || modelValue === null) {\n          date = NaN;\n        } else if (angular.isDate(modelValue)) {\n          date = modelValue;\n        } else if (options.dateType === 'string') {\n          date = dateParser.parse(modelValue, null, options.modelDateFormat);\n        } else if (options.dateType === 'unix') {\n          date = new Date(modelValue * 1e3);\n        } else {\n          date = new Date(modelValue);\n        }\n        controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n        return getDateFormattedString();\n      });\n      controller.$render = function() {\n        element.val(getDateFormattedString());\n      };\n      function getDateFormattedString() {\n        return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n      }\n      scope.$on('$destroy', function() {\n        if (datepicker) datepicker.destroy();\n        options = null;\n        datepicker = null;\n      });\n    }\n  };\n} ]).provider('datepickerViews', function() {\n  function split(arr, size) {\n    var arrays = [];\n    while (arr.length > 0) {\n      arrays.push(arr.splice(0, size));\n    }\n    return arrays;\n  }\n  function mod(n, m) {\n    return (n % m + m) % m;\n  }\n  this.$get = [ '$dateFormatter', '$dateParser', '$sce', function($dateFormatter, $dateParser, $sce) {\n    return function(picker) {\n      var scope = picker.$scope;\n      var options = picker.$options;\n      var lang = options.lang;\n      var formatDate = function(date, format) {\n        return $dateFormatter.formatDate(date, format, lang);\n      };\n      var dateParser = $dateParser({\n        format: options.dateFormat,\n        lang: lang,\n        strict: options.strictFormat\n      });\n      var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n      var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n      var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n      var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n      var viewDate = {\n        year: startDate.getFullYear(),\n        month: startDate.getMonth(),\n        date: startDate.getDate()\n      };\n      var views = [ {\n        format: options.dayFormat,\n        split: 7,\n        steps: {\n          month: 1\n        },\n        update: function(date, force) {\n          if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$build();\n          } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n            viewDate.date = picker.$date.getDate();\n            picker.$updateSelected();\n          }\n        },\n        build: function() {\n          var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n          var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n          var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n          var firstDateOffset = firstDate.getTimezoneOffset();\n          var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n          if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 6e4);\n          var days = [];\n          var day;\n          for (var i = 0; i < 42; i++) {\n            day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n            days.push({\n              date: day,\n              isToday: day.toDateString() === today,\n              label: formatDate(day, this.format),\n              selected: picker.$date && this.isSelected(day),\n              muted: day.getMonth() !== viewDate.month,\n              disabled: this.isDisabled(day)\n            });\n          }\n          scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n          scope.showLabels = true;\n          scope.labels = weekDaysLabelsHtml;\n          scope.rows = split(days, this.split);\n          scope.isTodayDisabled = this.isDisabled(new Date());\n          this.built = true;\n        },\n        isSelected: function(date) {\n          return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n        },\n        isDisabled: function(date) {\n          var time = date.getTime();\n          if (time < Date.parse(options.minDate) || time > Date.parse(options.maxDate)) return true;\n          if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n          if (options.disabledDateRanges) {\n            for (var i = 0; i < options.disabledDateRanges.length; i++) {\n              if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                return true;\n              }\n            }\n          }\n          return false;\n        },\n        onKeyDown: function(evt) {\n          if (!picker.$date) {\n            return;\n          }\n          var actualTime = picker.$date.getTime();\n          var newDate;\n          if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5); else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5); else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5); else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n          if (!this.isDisabled(newDate)) picker.select(newDate, true);\n        }\n      }, {\n        name: 'month',\n        format: options.monthFormat,\n        split: 4,\n        steps: {\n          year: 1\n        },\n        update: function(date, force) {\n          if (!this.built || date.getFullYear() !== viewDate.year) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$build();\n          } else if (date.getMonth() !== viewDate.month) {\n            angular.extend(viewDate, {\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$updateSelected();\n          }\n        },\n        build: function() {\n          var months = [];\n          var month;\n          for (var i = 0; i < 12; i++) {\n            month = new Date(viewDate.year, i, 1);\n            months.push({\n              date: month,\n              label: formatDate(month, this.format),\n              selected: picker.$isSelected(month),\n              disabled: this.isDisabled(month)\n            });\n          }\n          scope.title = formatDate(month, options.yearTitleFormat);\n          scope.showLabels = false;\n          scope.rows = split(months, this.split);\n          this.built = true;\n        },\n        isSelected: function(date) {\n          return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n        },\n        isDisabled: function(date) {\n          var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n          return lastDate < options.minDate || date.getTime() > options.maxDate;\n        },\n        onKeyDown: function(evt) {\n          if (!picker.$date) {\n            return;\n          }\n          var actualMonth = picker.$date.getMonth();\n          var newDate = new Date(picker.$date);\n          if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1); else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4); else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1); else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n          if (!this.isDisabled(newDate)) picker.select(newDate, true);\n        }\n      }, {\n        name: 'year',\n        format: options.yearFormat,\n        split: 4,\n        steps: {\n          year: 12\n        },\n        update: function(date, force) {\n          if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$build();\n          } else if (date.getFullYear() !== viewDate.year) {\n            angular.extend(viewDate, {\n              year: picker.$date.getFullYear(),\n              month: picker.$date.getMonth(),\n              date: picker.$date.getDate()\n            });\n            picker.$updateSelected();\n          }\n        },\n        build: function() {\n          var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n          var years = [];\n          var year;\n          for (var i = 0; i < 12; i++) {\n            year = new Date(firstYear + i, 0, 1);\n            years.push({\n              date: year,\n              label: formatDate(year, this.format),\n              selected: picker.$isSelected(year),\n              disabled: this.isDisabled(year)\n            });\n          }\n          scope.title = years[0].label + '-' + years[years.length - 1].label;\n          scope.showLabels = false;\n          scope.rows = split(years, this.split);\n          this.built = true;\n        },\n        isSelected: function(date) {\n          return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n        },\n        isDisabled: function(date) {\n          var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n          return lastDate < options.minDate || date.getTime() > options.maxDate;\n        },\n        onKeyDown: function(evt) {\n          if (!picker.$date) {\n            return;\n          }\n          var actualYear = picker.$date.getFullYear();\n          var newDate = new Date(picker.$date);\n          if (evt.keyCode === 37) newDate.setYear(actualYear - 1); else if (evt.keyCode === 38) newDate.setYear(actualYear - 4); else if (evt.keyCode === 39) newDate.setYear(actualYear + 1); else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n          if (!this.isDisabled(newDate)) picker.select(newDate, true);\n        }\n      } ];\n      return {\n        views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n        viewDate: viewDate\n      };\n    };\n  } ];\n});\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissible: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissible]\n        $alert.$scope.dismissible = !!options.dismissible;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissible'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissible'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.rangedatepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.datetimepicker',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.pagination',\n  'mgcrea.ngStrap.sort'\n]);\n"],"sourceRoot":"/source/"}