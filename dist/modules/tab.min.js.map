{"version":3,"sources":["modules/tab.js"],"names":["angular","controller","provider","$scope","$element","defaults","this","self","$options","forEach","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","isUndefined","$active","key","$attrs","$navClass","$remove","index","active","activeIndex","indexOf","splice","map","$setActive","length","value","name","fn","$pane","$get","$tab","scope","require","transclude","directive","templateUrl","attr","template","link","postLink","ngModelCtrl","bsTabsCtrl","$setViewValue","$formatters","push","attrs","modelValue","bsActivePane","parsedBsActivePane","assign","$parse","$watch","newValue","oldValue","$observe","controllers","render","$animate","$isActive","element","animation","addClass","$sce","trustAsHtml"],"mappings":"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","file":"modules/tab.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tab', []).provider('$tab', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    template: 'tab/tab.tpl.html',\n    navClass: 'nav-tabs',\n    activeClass: 'active'\n  };\n  var controller = this.controller = function($scope, $element, $attrs) {\n    var self = this;\n    self.$options = angular.copy(defaults);\n    angular.forEach([ 'animation', 'navClass', 'activeClass' ], function(key) {\n      if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n    });\n    $scope.$navClass = self.$options.navClass;\n    $scope.$activeClass = self.$options.activeClass;\n    self.$panes = $scope.$panes = [];\n    self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n    self.$push = function(pane) {\n      if (angular.isUndefined(self.$panes.$active)) {\n        $scope.$setActive(pane.name || 0);\n      }\n      self.$panes.push(pane);\n    };\n    self.$remove = function(pane) {\n      var index = self.$panes.indexOf(pane);\n      var active = self.$panes.$active;\n      var activeIndex;\n      if (angular.isString(active)) {\n        activeIndex = self.$panes.map(function(pane) {\n          return pane.name;\n        }).indexOf(active);\n      } else {\n        activeIndex = self.$panes.$active;\n      }\n      self.$panes.splice(index, 1);\n      if (index < activeIndex) {\n        activeIndex--;\n      } else if (index === activeIndex && activeIndex === self.$panes.length) {\n        activeIndex--;\n      }\n      if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n        self.$setActive(self.$panes[activeIndex].name || activeIndex);\n      } else {\n        self.$setActive();\n      }\n    };\n    self.$setActive = $scope.$setActive = function(value) {\n      self.$panes.$active = value;\n      self.$activePaneChangeListeners.forEach(function(fn) {\n        fn();\n      });\n    };\n    self.$isActive = $scope.$isActive = function($pane, $index) {\n      return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n    };\n  };\n  this.$get = function() {\n    var $tab = {};\n    $tab.defaults = defaults;\n    $tab.controller = controller;\n    return $tab;\n  };\n}).directive('bsTabs', [ '$window', '$animate', '$tab', '$parse', function($window, $animate, $tab, $parse) {\n  var defaults = $tab.defaults;\n  return {\n    require: [ '?ngModel', 'bsTabs' ],\n    transclude: true,\n    scope: true,\n    controller: [ '$scope', '$element', '$attrs', $tab.controller ],\n    templateUrl: function(element, attr) {\n      return attr.template || defaults.template;\n    },\n    link: function postLink(scope, element, attrs, controllers) {\n      var ngModelCtrl = controllers[0];\n      var bsTabsCtrl = controllers[1];\n      if (ngModelCtrl) {\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n        });\n        ngModelCtrl.$formatters.push(function(modelValue) {\n          bsTabsCtrl.$setActive(modelValue);\n          return modelValue;\n        });\n      }\n      if (attrs.bsActivePane) {\n        var parsedBsActivePane = $parse(attrs.bsActivePane);\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n        });\n        scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n          bsTabsCtrl.$setActive(newValue);\n        }, true);\n      }\n    }\n  };\n} ]).directive('bsPane', [ '$window', '$animate', '$sce', function($window, $animate, $sce) {\n  return {\n    require: [ '^?ngModel', '^bsTabs' ],\n    scope: true,\n    link: function postLink(scope, element, attrs, controllers) {\n      var bsTabsCtrl = controllers[1];\n      element.addClass('tab-pane');\n      attrs.$observe('title', function(newValue, oldValue) {\n        scope.title = $sce.trustAsHtml(newValue);\n      });\n      scope.name = attrs.name;\n      scope.link = attrs.link ? attrs.link : false;\n      if (bsTabsCtrl.$options.animation) {\n        element.addClass(bsTabsCtrl.$options.animation);\n      }\n      attrs.$observe('disabled', function(newValue, oldValue) {\n        scope.disabled = scope.$eval(newValue);\n      });\n      bsTabsCtrl.$push(scope);\n      scope.$on('$destroy', function() {\n        bsTabsCtrl.$remove(scope);\n      });\n      function render() {\n        var index = bsTabsCtrl.$panes.indexOf(scope);\n        $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n      }\n      bsTabsCtrl.$activePaneChangeListeners.push(function() {\n        render();\n      });\n      render();\n    }\n  };\n} ]);\n"],"sourceRoot":"/source/"}