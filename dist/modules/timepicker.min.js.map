{"version":3,"sources":["modules/timepicker.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$get","$timepicker","$tooltip","element","extend","config","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","init","parentScope","floorMinutes","time","options","scope","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","controller","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","index","$moveIndex","value","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","$isBuilt","$render","keep","$timeout","Date","setHours","setMinutes","setSeconds","$setViewValue","copy","hide","midIndex","parseInt","hours","push","disabled","label","selected","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","isTouch","$onKeyDown","test","keyCode","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","$element","blur","directive","$options","require","restrict","$window","navigator","userAgent","link","falseValueRegExp","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","forEach","key","isDefined","$eval","bsKey","timepicker","newValue","oldValue","isString","$watch","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","ngModel","update","timezoneOffsetAdjust","$formatters","modelValue","NaN","parse","$on"],"mappings":"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","file":"modules/timepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', [ 'mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip' ]).provider('$timepicker', function() {\n  var defaults = this.defaults = {\n    animation: 'am-fade',\n    defaultDate: 'auto',\n    prefixClass: 'timepicker',\n    placement: 'bottom-left',\n    templateUrl: 'timepicker/timepicker.tpl.html',\n    trigger: 'focus',\n    container: false,\n    keyboard: true,\n    html: false,\n    delay: 0,\n    useNative: true,\n    timeType: 'date',\n    timeFormat: 'shortTime',\n    timezone: null,\n    modelTimeFormat: null,\n    autoclose: false,\n    minTime: -Infinity,\n    maxTime: +Infinity,\n    length: 5,\n    hourStep: 1,\n    minuteStep: 5,\n    secondStep: 5,\n    roundDisplay: false,\n    iconUp: 'nox-sort-up',\n    iconDown: 'nox-sort-down',\n    arrowBehavior: 'pager'\n  };\n  this.$get = [ '$window', '$document', '$rootScope', '$sce', '$dateFormatter', '$tooltip', '$timeout', function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n    var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n    var isTouch = 'createTouch' in $window.document && isNative;\n    if (!defaults.lang) {\n      defaults.lang = $dateFormatter.getDefaultLocale();\n    }\n    function timepickerFactory(element, controller, config) {\n      var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n      var parentScope = config.scope;\n      var options = $timepicker.$options;\n      var scope = $timepicker.$scope;\n      var lang = options.lang;\n      var formatDate = function(date, format, timezone) {\n        return $dateFormatter.formatDate(date, format, lang, timezone);\n      };\n      function floorMinutes(time) {\n        var coeff = 1e3 * 60 * options.minuteStep;\n        return new Date(Math.floor(time.getTime() / coeff) * coeff);\n      }\n      var selectedIndex = 0;\n      var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n      var startDate = controller.$dateValue || defaultDate;\n      var viewDate = {\n        hour: startDate.getHours(),\n        meridian: startDate.getHours() < 12,\n        minute: startDate.getMinutes(),\n        second: startDate.getSeconds(),\n        millisecond: startDate.getMilliseconds()\n      };\n      var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n      var hoursFormat = $dateFormatter.hoursFormat(format);\n      var timeSeparator = $dateFormatter.timeSeparator(format);\n      var minutesFormat = $dateFormatter.minutesFormat(format);\n      var secondsFormat = $dateFormatter.secondsFormat(format);\n      var showSeconds = $dateFormatter.showSeconds(format);\n      var showAM = $dateFormatter.showAM(format);\n      scope.$iconUp = options.iconUp;\n      scope.$iconDown = options.iconDown;\n      scope.$select = function(date, index) {\n        $timepicker.select(date, index);\n      };\n      scope.$moveIndex = function(value, index) {\n        $timepicker.$moveIndex(value, index);\n      };\n      scope.$switchMeridian = function(date) {\n        $timepicker.switchMeridian(date);\n      };\n      $timepicker.update = function(date) {\n        if (angular.isDate(date) && !isNaN(date.getTime())) {\n          $timepicker.$date = date;\n          angular.extend(viewDate, {\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds(),\n            millisecond: date.getMilliseconds()\n          });\n          $timepicker.$build();\n        } else if (!$timepicker.$isBuilt) {\n          $timepicker.$build();\n        }\n      };\n      $timepicker.select = function(date, index, keep) {\n        if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n          controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n        }\n        if (!angular.isDate(date)) date = new Date(date);\n        if (index === 0) controller.$dateValue.setHours(date.getHours()); else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes()); else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n        controller.$setViewValue(angular.copy(controller.$dateValue));\n        controller.$render();\n        if (options.autoclose && !keep) {\n          $timeout(function() {\n            $timepicker.hide(true);\n          });\n        }\n      };\n      $timepicker.switchMeridian = function(date) {\n        if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n          return;\n        }\n        var hours = (date || controller.$dateValue).getHours();\n        controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n        controller.$setViewValue(angular.copy(controller.$dateValue));\n        controller.$render();\n      };\n      $timepicker.$build = function() {\n        var i;\n        var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n        var hours = [];\n        var hour;\n        for (i = 0; i < options.length; i++) {\n          hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n          hours.push({\n            date: hour,\n            label: formatDate(hour, hoursFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n            disabled: $timepicker.$isDisabled(hour, 0)\n          });\n        }\n        var minutes = [];\n        var minute;\n        for (i = 0; i < options.length; i++) {\n          minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n          minutes.push({\n            date: minute,\n            label: formatDate(minute, minutesFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n            disabled: $timepicker.$isDisabled(minute, 1)\n          });\n        }\n        var seconds = [];\n        var second;\n        for (i = 0; i < options.length; i++) {\n          second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n          seconds.push({\n            date: second,\n            label: formatDate(second, secondsFormat),\n            selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n            disabled: $timepicker.$isDisabled(second, 2)\n          });\n        }\n        var rows = [];\n        for (i = 0; i < options.length; i++) {\n          if (showSeconds) {\n            rows.push([ hours[i], minutes[i], seconds[i] ]);\n          } else {\n            rows.push([ hours[i], minutes[i] ]);\n          }\n        }\n        scope.rows = rows;\n        scope.showSeconds = showSeconds;\n        scope.showAM = showAM;\n        scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n        scope.timeSeparator = timeSeparator;\n        $timepicker.$isBuilt = true;\n      };\n      $timepicker.$isSelected = function(date, index) {\n        if (!$timepicker.$date) return false; else if (index === 0) {\n          return date.getHours() === $timepicker.$date.getHours();\n        } else if (index === 1) {\n          return date.getMinutes() === $timepicker.$date.getMinutes();\n        } else if (index === 2) {\n          return date.getSeconds() === $timepicker.$date.getSeconds();\n        }\n      };\n      $timepicker.$isDisabled = function(date, index) {\n        var selectedTime;\n        if (index === 0) {\n          selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n        } else if (index === 1) {\n          selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n        } else if (index === 2) {\n          selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n        }\n        return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n      };\n      scope.$arrowAction = function(value, index) {\n        if (options.arrowBehavior === 'picker') {\n          $timepicker.$setTimeByStep(value, index);\n        } else {\n          $timepicker.$moveIndex(value, index);\n        }\n      };\n      $timepicker.$setTimeByStep = function(value, index) {\n        var newDate = new Date($timepicker.$date || startDate);\n        var hours = newDate.getHours();\n        var minutes = newDate.getMinutes();\n        var seconds = newDate.getSeconds();\n        if (index === 0) {\n          newDate.setHours(hours - parseInt(options.hourStep, 10) * value);\n        } else if (index === 1) {\n          newDate.setMinutes(minutes - parseInt(options.minuteStep, 10) * value);\n        } else if (index === 2) {\n          newDate.setSeconds(seconds - parseInt(options.secondStep, 10) * value);\n        }\n        $timepicker.select(newDate, index, true);\n      };\n      $timepicker.$moveIndex = function(value, index) {\n        var targetDate;\n        if (index === 0) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour + value * options.length, viewDate.minute, viewDate.second);\n          angular.extend(viewDate, {\n            hour: targetDate.getHours()\n          });\n        } else if (index === 1) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + value * options.length * options.minuteStep, viewDate.second);\n          angular.extend(viewDate, {\n            minute: targetDate.getMinutes()\n          });\n        } else if (index === 2) {\n          targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + value * options.length * options.secondStep);\n          angular.extend(viewDate, {\n            second: targetDate.getSeconds()\n          });\n        }\n        $timepicker.$build();\n      };\n      $timepicker.$onMouseDown = function(evt) {\n        if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n        evt.stopPropagation();\n        if (isTouch) {\n          var targetEl = angular.element(evt.target);\n          if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n            targetEl = targetEl.parent();\n          }\n          targetEl.triggerHandler('click');\n        }\n      };\n      $timepicker.$onKeyDown = function(evt) {\n        if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (evt.keyCode === 13) {\n          $timepicker.hide(true);\n          return;\n        }\n        var newDate = new Date($timepicker.$date);\n        var hours = newDate.getHours();\n        var hoursLength = formatDate(newDate, hoursFormat).length;\n        var minutes = newDate.getMinutes();\n        var minutesLength = formatDate(newDate, minutesFormat).length;\n        var seconds = newDate.getSeconds();\n        var secondsLength = formatDate(newDate, secondsFormat).length;\n        var sepLength = 1;\n        var lateralMove = /(37|39)/.test(evt.keyCode);\n        var count = 2 + showSeconds * 1 + showAM * 1;\n        if (lateralMove) {\n          if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1; else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n        }\n        var selectRange = [ 0, hoursLength ];\n        var incr = 0;\n        if (evt.keyCode === 38) incr = -1;\n        if (evt.keyCode === 40) incr = +1;\n        var isSeconds = selectedIndex === 2 && showSeconds;\n        var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n        if (selectedIndex === 0) {\n          newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n          hoursLength = formatDate(newDate, hoursFormat).length;\n          selectRange = [ 0, hoursLength ];\n        } else if (selectedIndex === 1) {\n          newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n          minutesLength = formatDate(newDate, minutesFormat).length;\n          selectRange = [ hoursLength + sepLength, minutesLength ];\n        } else if (isSeconds) {\n          newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n          secondsLength = formatDate(newDate, secondsFormat).length;\n          selectRange = [ hoursLength + sepLength + minutesLength + sepLength, secondsLength ];\n        } else if (isMeridian) {\n          if (!lateralMove) $timepicker.switchMeridian();\n          selectRange = [ hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2 ];\n        }\n        $timepicker.select(newDate, selectedIndex, true);\n        createSelection(selectRange[0], selectRange[1]);\n        parentScope.$digest();\n      };\n      function createSelection(start, length) {\n        var end = start + length;\n        if (element[0].createTextRange) {\n          var selRange = element[0].createTextRange();\n          selRange.collapse(true);\n          selRange.moveStart('character', start);\n          selRange.moveEnd('character', end);\n          selRange.select();\n        } else if (element[0].setSelectionRange) {\n          element[0].setSelectionRange(start, end);\n        } else if (angular.isUndefined(element[0].selectionStart)) {\n          element[0].selectionStart = start;\n          element[0].selectionEnd = end;\n        }\n      }\n      function focusElement() {\n        element[0].focus();\n      }\n      var _init = $timepicker.init;\n      $timepicker.init = function() {\n        if (isNative && options.useNative) {\n          element.prop('type', 'time');\n          element.css('-webkit-appearance', 'textfield');\n          return;\n        } else if (isTouch) {\n          element.prop('type', 'text');\n          element.attr('readonly', 'true');\n          element.on('click', focusElement);\n        }\n        _init();\n      };\n      var _destroy = $timepicker.destroy;\n      $timepicker.destroy = function() {\n        if (isNative && options.useNative) {\n          element.off('click', focusElement);\n        }\n        _destroy();\n      };\n      var _show = $timepicker.show;\n      $timepicker.show = function() {\n        if (!isTouch && element.attr('readonly') || element.attr('disabled')) return;\n        _show();\n        $timeout(function() {\n          if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.on('keydown', $timepicker.$onKeyDown);\n          }\n        }, 0, false);\n      };\n      var _hide = $timepicker.hide;\n      $timepicker.hide = function(blur) {\n        if (!$timepicker.$isShown) return;\n        if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n        if (options.keyboard) {\n          if (element) element.off('keydown', $timepicker.$onKeyDown);\n        }\n        _hide(blur);\n      };\n      return $timepicker;\n    }\n    timepickerFactory.defaults = defaults;\n    return timepickerFactory;\n  } ];\n}).directive('bsTimepicker', [ '$window', '$parse', '$q', '$dateFormatter', '$dateParser', '$timepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n  var defaults = $timepicker.defaults;\n  var isNative = /(ip[ao]d|iphone|android)/gi.test($window.navigator.userAgent);\n  return {\n    restrict: 'EAC',\n    require: 'ngModel',\n    link: function postLink(scope, element, attr, controller) {\n      var options = {\n        scope: scope\n      };\n      angular.forEach([ 'template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate' ], function(key) {\n        if (angular.isDefined(attr[key])) options[key] = attr[key];\n      });\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach([ 'html', 'container', 'autoclose', 'useNative', 'roundDisplay' ], function(key) {\n        if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n          options[key] = false;\n        }\n      });\n      angular.forEach([ 'onBeforeShow', 'onShow', 'onBeforeHide', 'onHide' ], function(key) {\n        var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n        if (angular.isDefined(attr[bsKey])) {\n          options[key] = scope.$eval(attr[bsKey]);\n        }\n      });\n      if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n      var timepicker = $timepicker(element, controller, options);\n      options = timepicker.$options;\n      var lang = options.lang;\n      var formatDate = function(date, format, timezone) {\n        return $dateFormatter.formatDate(date, format, lang, timezone);\n      };\n      if (attr.bsShow) {\n        scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          if (newValue === true) {\n            timepicker.show();\n          } else {\n            timepicker.hide();\n          }\n        });\n      }\n      var dateParser = $dateParser({\n        format: options.timeFormat,\n        lang: lang\n      });\n      angular.forEach([ 'minTime', 'maxTime' ], function(key) {\n        if (angular.isDefined(attr[key])) {\n          attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            if (!isNaN(timepicker.$options[key])) timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        }\n      });\n      scope.$watch(attr.ngModel, function(newValue, oldValue) {\n        timepicker.update(controller.$dateValue);\n      }, true);\n      function validateAgainstMinMaxTime(parsedTime) {\n        if (!angular.isDate(parsedTime)) return;\n        var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n        var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n        var isValid = isMinValid && isMaxValid;\n        controller.$setValidity('date', isValid);\n        controller.$setValidity('min', isMinValid);\n        controller.$setValidity('max', isMaxValid);\n        if (!isValid) {\n          return;\n        }\n        controller.$dateValue = parsedTime;\n      }\n      controller.$parsers.unshift(function(viewValue) {\n        var date;\n        if (!viewValue) {\n          controller.$setValidity('date', true);\n          return null;\n        }\n        var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n        if (!parsedTime || isNaN(parsedTime.getTime())) {\n          controller.$setValidity('date', false);\n          return undefined;\n        }\n        validateAgainstMinMaxTime(parsedTime);\n        if (options.timeType === 'string') {\n          date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n          return formatDate(date, options.modelTimeFormat || options.timeFormat);\n        }\n        date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n        if (options.timeType === 'number') {\n          return date.getTime();\n        } else if (options.timeType === 'unix') {\n          return date.getTime() / 1e3;\n        } else if (options.timeType === 'iso') {\n          return date.toISOString();\n        }\n        return new Date(date);\n      });\n      controller.$formatters.push(function(modelValue) {\n        var date;\n        if (angular.isUndefined(modelValue) || modelValue === null) {\n          date = NaN;\n        } else if (angular.isDate(modelValue)) {\n          date = modelValue;\n        } else if (options.timeType === 'string') {\n          date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n        } else if (options.timeType === 'unix') {\n          date = new Date(modelValue * 1e3);\n        } else {\n          date = new Date(modelValue);\n        }\n        controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n        return getTimeFormattedString();\n      });\n      controller.$render = function() {\n        element.val(getTimeFormattedString());\n      };\n      function getTimeFormattedString() {\n        return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n      }\n      scope.$on('$destroy', function() {\n        if (timepicker) timepicker.destroy();\n        options = null;\n        timepicker = null;\n      });\n    }\n  };\n} ]);\n"],"sourceRoot":"/source/"}